/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using BybitAPI.Client;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;

namespace BybitAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPositionsApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Update margin.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin</param>
        /// <param name="margin">New margin you want set</param>
        /// <returns>Object</returns>
        object PositionsChangeMargin(string symbol, string margin);

        /// <summary>
        /// Update margin.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin</param>
        /// <param name="margin">New margin you want set</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> PositionsChangeMarginWithHttpInfo(string symbol, string margin);

        /// <summary>
        /// Get user&#39;s closed profit and loss records
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="startTime">Start timestamp point for result, in second (optional)</param>
        /// <param name="endTime">End timestamp point for result, in second (optional)</param>
        /// <param name="execType">Execution type (optional)</param>
        /// <param name="page">Page. By default, gets first page of data. Maximum of 50 pages (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>Object</returns>
        object PositionsClosePnlRecords(string symbol, int? startTime = null, int? endTime = null, string execType = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get user&#39;s closed profit and loss records
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="startTime">Start timestamp point for result, in second (optional)</param>
        /// <param name="endTime">End timestamp point for result, in second (optional)</param>
        /// <param name="execType">Execution type (optional)</param>
        /// <param name="page">Page. By default, gets first page of data. Maximum of 50 pages (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> PositionsClosePnlRecordsWithHttpInfo(string symbol, int? startTime = null, int? endTime = null, string execType = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get my position list.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin (optional)</param>
        /// <returns>Object</returns>
        object PositionsMyPosition(string symbol = null);

        /// <summary>
        /// Get my position list.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> PositionsMyPositionWithHttpInfo(string symbol = null);

        /// <summary>
        /// Change user leverage.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">A symbol which you want change its leverage</param>
        /// <param name="leverage">New leverage you want set</param>
        /// <returns>Object</returns>
        object PositionsSaveLeverage(string symbol, string leverage);

        /// <summary>
        /// Change user leverage.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">A symbol which you want change its leverage</param>
        /// <param name="leverage">New leverage you want set</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> PositionsSaveLeverageWithHttpInfo(string symbol, string leverage);

        /// <summary>
        /// Set Trading-Stop Condition.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="takeProfit">Not less than 0, 0 means cancel TP (optional)</param>
        /// <param name="stopLoss">Not less than 0, 0 means cancel SL (optional)</param>
        /// <param name="trailingStop">Not less than 0, 0 means cancel TS (optional)</param>
        /// <param name="newTrailingActive">Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)</param>
        /// <returns>Object</returns>
        object PositionsTradingStop(string symbol, string takeProfit = null, string stopLoss = null, string trailingStop = null, string newTrailingActive = null);

        /// <summary>
        /// Set Trading-Stop Condition.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="takeProfit">Not less than 0, 0 means cancel TP (optional)</param>
        /// <param name="stopLoss">Not less than 0, 0 means cancel SL (optional)</param>
        /// <param name="trailingStop">Not less than 0, 0 means cancel TS (optional)</param>
        /// <param name="newTrailingActive">Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> PositionsTradingStopWithHttpInfo(string symbol, string takeProfit = null, string stopLoss = null, string trailingStop = null, string newTrailingActive = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        /// Update margin.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin</param>
        /// <param name="margin">New margin you want set</param>
        /// <returns>Task of Object</returns>
        Task<object> PositionsChangeMarginAsync(string symbol, string margin);

        /// <summary>
        /// Update margin.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin</param>
        /// <param name="margin">New margin you want set</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> PositionsChangeMarginAsyncWithHttpInfo(string symbol, string margin);

        /// <summary>
        /// Get user&#39;s closed profit and loss records
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="startTime">Start timestamp point for result, in second (optional)</param>
        /// <param name="endTime">End timestamp point for result, in second (optional)</param>
        /// <param name="execType">Execution type (optional)</param>
        /// <param name="page">Page. By default, gets first page of data. Maximum of 50 pages (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>Task of Object</returns>
        Task<object> PositionsClosePnlRecordsAsync(string symbol, int? startTime = null, int? endTime = null, string execType = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get user&#39;s closed profit and loss records
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="startTime">Start timestamp point for result, in second (optional)</param>
        /// <param name="endTime">End timestamp point for result, in second (optional)</param>
        /// <param name="execType">Execution type (optional)</param>
        /// <param name="page">Page. By default, gets first page of data. Maximum of 50 pages (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> PositionsClosePnlRecordsAsyncWithHttpInfo(string symbol, int? startTime = null, int? endTime = null, string execType = null, int? page = null, int? limit = null);

        /// <summary>
        /// Get my position list.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin (optional)</param>
        /// <returns>Task of Object</returns>
        Task<object> PositionsMyPositionAsync(string symbol = null);

        /// <summary>
        /// Get my position list.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> PositionsMyPositionAsyncWithHttpInfo(string symbol = null);

        /// <summary>
        /// Change user leverage.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">A symbol which you want change its leverage</param>
        /// <param name="leverage">New leverage you want set</param>
        /// <returns>Task of Object</returns>
        Task<object> PositionsSaveLeverageAsync(string symbol, string leverage);

        /// <summary>
        /// Change user leverage.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">A symbol which you want change its leverage</param>
        /// <param name="leverage">New leverage you want set</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> PositionsSaveLeverageAsyncWithHttpInfo(string symbol, string leverage);

        /// <summary>
        /// Set Trading-Stop Condition.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="takeProfit">Not less than 0, 0 means cancel TP (optional)</param>
        /// <param name="stopLoss">Not less than 0, 0 means cancel SL (optional)</param>
        /// <param name="trailingStop">Not less than 0, 0 means cancel TS (optional)</param>
        /// <param name="newTrailingActive">Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)</param>
        /// <returns>Task of Object</returns>
        Task<object> PositionsTradingStopAsync(string symbol, string takeProfit = null, string stopLoss = null, string trailingStop = null, string newTrailingActive = null);

        /// <summary>
        /// Set Trading-Stop Condition.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="takeProfit">Not less than 0, 0 means cancel TP (optional)</param>
        /// <param name="stopLoss">Not less than 0, 0 means cancel SL (optional)</param>
        /// <param name="trailingStop">Not less than 0, 0 means cancel TS (optional)</param>
        /// <param name="newTrailingActive">Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> PositionsTradingStopAsyncWithHttpInfo(string symbol, string takeProfit = null, string stopLoss = null, string trailingStop = null, string newTrailingActive = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PositionsApi : IPositionsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PositionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PositionsApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PositionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PositionsApi(Configuration configuration = null)
        {
            if (configuration is null) // use the default one in Configuration
            {
                Configuration = Configuration.Default;
            }
            else
            {
                Configuration = configuration;
            }

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath() => Configuration.ApiClient.RestClient.BaseUrl.ToString();

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory is not null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader() => new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value) => Configuration.AddDefaultHeader(key, value);

        /// <summary>
        /// Update margin.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin</param>
        /// <param name="margin">New margin you want set</param>
        /// <returns>Object</returns>
        public object PositionsChangeMargin(string symbol, string margin)
        {
            var localVarResponse = PositionsChangeMarginWithHttpInfo(symbol, margin);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update margin.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin</param>
        /// <param name="margin">New margin you want set</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> PositionsChangeMarginWithHttpInfo(string symbol, string margin)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionsApi->PositionsChangeMargin");
            }
            // verify the required parameter 'margin' is set
            if (margin is null)
            {
                throw new ApiException(400, "Missing required parameter 'margin' when calling PositionsApi->PositionsChangeMargin");
            }

            var localVarPath = "/position/change-position-margin";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            if (margin is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "margin", Configuration.ApiClient.ParameterToString(margin)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("PositionsChangeMargin", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Update margin.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin</param>
        /// <param name="margin">New margin you want set</param>
        /// <returns>Task of Object</returns>
        public async Task<object> PositionsChangeMarginAsync(string symbol, string margin)
        {
            var localVarResponse = await PositionsChangeMarginAsyncWithHttpInfo(symbol, margin);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update margin.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin</param>
        /// <param name="margin">New margin you want set</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async Task<ApiResponse<object>> PositionsChangeMarginAsyncWithHttpInfo(string symbol, string margin)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionsApi->PositionsChangeMargin");
            }
            // verify the required parameter 'margin' is set
            if (margin is null)
            {
                throw new ApiException(400, "Missing required parameter 'margin' when calling PositionsApi->PositionsChangeMargin");
            }

            var localVarPath = "/position/change-position-margin";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            if (margin is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "margin", Configuration.ApiClient.ParameterToString(margin)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("PositionsChangeMargin", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get user&#39;s closed profit and loss records
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="startTime">Start timestamp point for result, in second (optional)</param>
        /// <param name="endTime">End timestamp point for result, in second (optional)</param>
        /// <param name="execType">Execution type (optional)</param>
        /// <param name="page">Page. By default, gets first page of data. Maximum of 50 pages (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>Object</returns>
        public object PositionsClosePnlRecords(string symbol, int? startTime = null, int? endTime = null, string execType = null, int? page = null, int? limit = null)
        {
            var localVarResponse = PositionsClosePnlRecordsWithHttpInfo(symbol, startTime, endTime, execType, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user&#39;s closed profit and loss records
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="startTime">Start timestamp point for result, in second (optional)</param>
        /// <param name="endTime">End timestamp point for result, in second (optional)</param>
        /// <param name="execType">Execution type (optional)</param>
        /// <param name="page">Page. By default, gets first page of data. Maximum of 50 pages (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> PositionsClosePnlRecordsWithHttpInfo(string symbol, int? startTime = null, int? endTime = null, string execType = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionsApi->PositionsClosePnlRecords");
            }

            var localVarPath = "/v2/private/trade/closed-pnl/list";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }

            if (startTime is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start_time", startTime)); // query parameter
            }

            if (endTime is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "end_time", endTime)); // query parameter
            }

            if (execType is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exec_type", execType)); // query parameter
            }

            if (page is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            }

            if (limit is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("PositionsClosePnlRecords", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get user&#39;s closed profit and loss records
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="startTime">Start timestamp point for result, in second (optional)</param>
        /// <param name="endTime">End timestamp point for result, in second (optional)</param>
        /// <param name="execType">Execution type (optional)</param>
        /// <param name="page">Page. By default, gets first page of data. Maximum of 50 pages (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>Task of Object</returns>
        public async Task<object> PositionsClosePnlRecordsAsync(string symbol, int? startTime = null, int? endTime = null, string execType = null, int? page = null, int? limit = null)
        {
            var localVarResponse = await PositionsClosePnlRecordsAsyncWithHttpInfo(symbol, startTime, endTime, execType, page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get user&#39;s closed profit and loss records
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="startTime">Start timestamp point for result, in second (optional)</param>
        /// <param name="endTime">End timestamp point for result, in second (optional)</param>
        /// <param name="execType">Execution type (optional)</param>
        /// <param name="page">Page. By default, gets first page of data. Maximum of 50 pages (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async Task<ApiResponse<object>> PositionsClosePnlRecordsAsyncWithHttpInfo(string symbol, int? startTime = null, int? endTime = null, string execType = null, int? page = null, int? limit = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionsApi->PositionsClosePnlRecords");
            }

            var localVarPath = "/v2/private/trade/closed-pnl/list";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }

            if (startTime is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "start_time", startTime)); // query parameter
            }

            if (endTime is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "end_time", endTime)); // query parameter
            }

            if (execType is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "exec_type", execType)); // query parameter
            }

            if (page is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            }

            if (limit is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("PositionsClosePnlRecords", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get my position list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin (optional)</param>
        /// <returns>Object</returns>
        public object PositionsMyPosition(string symbol = null)
        {
            var localVarResponse = PositionsMyPositionWithHttpInfo(symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get my position list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> PositionsMyPositionWithHttpInfo(string symbol = null)
        {
            var localVarPath = "/v2/private/position/list";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("PositionsMyPosition", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get my position list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin (optional)</param>
        /// <returns>Task of Object</returns>
        public async Task<object> PositionsMyPositionAsync(string symbol = null)
        {
            var localVarResponse = await PositionsMyPositionAsyncWithHttpInfo(symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get my position list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type which you want update its margin (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async Task<ApiResponse<object>> PositionsMyPositionAsyncWithHttpInfo(string symbol = null)
        {
            var localVarPath = "/v2/private/position/list";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("PositionsMyPosition", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Change user leverage.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">A symbol which you want change its leverage</param>
        /// <param name="leverage">New leverage you want set</param>
        /// <returns>Object</returns>
        public object PositionsSaveLeverage(string symbol, string leverage)
        {
            var localVarResponse = PositionsSaveLeverageWithHttpInfo(symbol, leverage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change user leverage.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">A symbol which you want change its leverage</param>
        /// <param name="leverage">New leverage you want set</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> PositionsSaveLeverageWithHttpInfo(string symbol, string leverage)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionsApi->PositionsSaveLeverage");
            }
            // verify the required parameter 'leverage' is set
            if (leverage is null)
            {
                throw new ApiException(400, "Missing required parameter 'leverage' when calling PositionsApi->PositionsSaveLeverage");
            }

            var localVarPath = "/user/leverage/save";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            if (leverage is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "leverage", Configuration.ApiClient.ParameterToString(leverage)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("PositionsSaveLeverage", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Change user leverage.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">A symbol which you want change its leverage</param>
        /// <param name="leverage">New leverage you want set</param>
        /// <returns>Task of Object</returns>
        public async Task<object> PositionsSaveLeverageAsync(string symbol, string leverage)
        {
            var localVarResponse = await PositionsSaveLeverageAsyncWithHttpInfo(symbol, leverage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Change user leverage.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">A symbol which you want change its leverage</param>
        /// <param name="leverage">New leverage you want set</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async Task<ApiResponse<object>> PositionsSaveLeverageAsyncWithHttpInfo(string symbol, string leverage)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionsApi->PositionsSaveLeverage");
            }
            // verify the required parameter 'leverage' is set
            if (leverage is null)
            {
                throw new ApiException(400, "Missing required parameter 'leverage' when calling PositionsApi->PositionsSaveLeverage");
            }

            var localVarPath = "/user/leverage/save";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            if (leverage is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "leverage", Configuration.ApiClient.ParameterToString(leverage)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("PositionsSaveLeverage", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Set Trading-Stop Condition.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="takeProfit">Not less than 0, 0 means cancel TP (optional)</param>
        /// <param name="stopLoss">Not less than 0, 0 means cancel SL (optional)</param>
        /// <param name="trailingStop">Not less than 0, 0 means cancel TS (optional)</param>
        /// <param name="newTrailingActive">Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)</param>
        /// <returns>Object</returns>
        public object PositionsTradingStop(string symbol, string takeProfit = null, string stopLoss = null, string trailingStop = null, string newTrailingActive = null)
        {
            var localVarResponse = PositionsTradingStopWithHttpInfo(symbol, takeProfit, stopLoss, trailingStop, newTrailingActive);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Trading-Stop Condition.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="takeProfit">Not less than 0, 0 means cancel TP (optional)</param>
        /// <param name="stopLoss">Not less than 0, 0 means cancel SL (optional)</param>
        /// <param name="trailingStop">Not less than 0, 0 means cancel TS (optional)</param>
        /// <param name="newTrailingActive">Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> PositionsTradingStopWithHttpInfo(string symbol, string takeProfit = null, string stopLoss = null, string trailingStop = null, string newTrailingActive = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionsApi->PositionsTradingStop");
            }

            var localVarPath = "/open-api/position/trading-stop";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            if (takeProfit is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "take_profit", Configuration.ApiClient.ParameterToString(takeProfit)));
            }

            if (stopLoss is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_loss", Configuration.ApiClient.ParameterToString(stopLoss)));
            }

            if (trailingStop is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "trailing_stop", Configuration.ApiClient.ParameterToString(trailingStop)));
            }

            if (newTrailingActive is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "new_trailing_active", Configuration.ApiClient.ParameterToString(newTrailingActive)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("PositionsTradingStop", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Set Trading-Stop Condition.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="takeProfit">Not less than 0, 0 means cancel TP (optional)</param>
        /// <param name="stopLoss">Not less than 0, 0 means cancel SL (optional)</param>
        /// <param name="trailingStop">Not less than 0, 0 means cancel TS (optional)</param>
        /// <param name="newTrailingActive">Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)</param>
        /// <returns>Task of Object</returns>
        public async Task<object> PositionsTradingStopAsync(string symbol, string takeProfit = null, string stopLoss = null, string trailingStop = null, string newTrailingActive = null)
        {
            var localVarResponse = await PositionsTradingStopAsyncWithHttpInfo(symbol, takeProfit, stopLoss, trailingStop, newTrailingActive);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Trading-Stop Condition.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="takeProfit">Not less than 0, 0 means cancel TP (optional)</param>
        /// <param name="stopLoss">Not less than 0, 0 means cancel SL (optional)</param>
        /// <param name="trailingStop">Not less than 0, 0 means cancel TS (optional)</param>
        /// <param name="newTrailingActive">Trailing stop trigger price. Trailing stops are triggered only when the price reaches the specified price. Trailing stops are triggered immediately by default. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async Task<ApiResponse<object>> PositionsTradingStopAsyncWithHttpInfo(string symbol, string takeProfit = null, string stopLoss = null, string trailingStop = null, string newTrailingActive = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling PositionsApi->PositionsTradingStop");
            }

            var localVarPath = "/open-api/position/trading-stop";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            if (takeProfit is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "take_profit", Configuration.ApiClient.ParameterToString(takeProfit)));
            }

            if (stopLoss is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_loss", Configuration.ApiClient.ParameterToString(stopLoss)));
            }

            if (trailingStop is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "trailing_stop", Configuration.ApiClient.ParameterToString(trailingStop)));
            }

            if (newTrailingActive is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "new_trailing_active", Configuration.ApiClient.ParameterToString(newTrailingActive)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("PositionsTradingStop", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }
    }
}