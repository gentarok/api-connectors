/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using BybitAPI.Client;
using BybitAPI.Model;
using RestSharp;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace BybitAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConditionalApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>V2ConditionalBase of OrderIdRes</returns>
        V2ConditionalBase<OrderIdRes> ConditionalCancel(string symbol, string stopOrderId = null, string orderLinkId = null);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>ApiResponse of V2ConditionalBase (OrderIdRes)</returns>
        ApiResponse<V2ConditionalBase<OrderIdRes>> ConditionalCancelWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>V2ConditionalBase of List of ConditionalCancelAllRes</returns>
        V2ConditionalBase<List<ConditionalCancelAllRes>> ConditionalCancelAll(string symbol);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>ApiResponse of V2ConditionalBase (List of ConditionalCancelAllRes)</returns>
        ApiResponse<V2ConditionalBase<List<ConditionalCancelAllRes>>> ConditionalCancelAllWithHttpInfo(string symbol);

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>Object</returns>
        object ConditionalGetOrders(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null);

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> ConditionalGetOrdersWithHttpInfo(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null);

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Object</returns>
        object ConditionalNew(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null);

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> ConditionalNewWithHttpInfo(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null);

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>Object</returns>
        object ConditionalQuery(string stopOrderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> ConditionalQueryWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Object</returns>
        object ConditionalReplace(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null);

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> ConditionalReplaceWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>Task of V2ConditionalBase (OrderIdRes)</returns>
        Task<V2ConditionalBase<OrderIdRes>> ConditionalCancelAsync(string symbol, string stopOrderId = null, string orderLinkId = null);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>Task of ApiResponse V2ConditionalBase of OrderIdRes</returns>
        Task<ApiResponse<V2ConditionalBase<OrderIdRes>>> ConditionalCancelAsyncWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of V2ConditionalBase (List of ConditionalCancelAllRes)</returns>
        Task<V2ConditionalBase<List<ConditionalCancelAllRes>>> ConditionalCancelAllAsync(string symbol);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of ApiResponse (V2ConditionalBase (List of ConditionalCancelAllRes))</returns>
        Task<ApiResponse<V2ConditionalBase<List<ConditionalCancelAllRes>>>> ConditionalCancelAllAsyncWithHttpInfo(string symbol);

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>Task of Object</returns>
        Task<object> ConditionalGetOrdersAsync(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null);

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> ConditionalGetOrdersAsyncWithHttpInfo(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null);

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Task of Object</returns>
        Task<object> ConditionalNewAsync(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null);

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> ConditionalNewAsyncWithHttpInfo(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null);

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>Task of Object</returns>
        Task<object> ConditionalQueryAsync(string stopOrderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> ConditionalQueryAsyncWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Task of Object</returns>
        Task<object> ConditionalReplaceAsync(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null);

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> ConditionalReplaceAsyncWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConditionalApi : ApiBase, IConditionalApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConditionalApi(string basePath) : base(basePath) { }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConditionalApi(Configuration configuration = null) : base(configuration) { }

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>V2ConditionalBase of OrderIdRes</returns>
        public V2ConditionalBase<OrderIdRes> ConditionalCancel(string symbol, string stopOrderId = null, string orderLinkId = null) => ConditionalCancelWithHttpInfo(symbol, stopOrderId, orderLinkId).Data;

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>ApiResponse of V2ConditionalBase (OrderIdRes)</returns>
        public ApiResponse<V2ConditionalBase<OrderIdRes>> ConditionalCancelWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalCancel");
            }
            // FIXED : According to the document, 'stopOrderId' or 'orderLinkId' is required.
            // see: https://bybit-exchange.github.io/docs/inverse/?console#t-cancelcond
            if (stopOrderId is null && orderLinkId is null)
            {
                throw new ApiException(400, "Missing required parameter 'stopOrderId' or 'orderLinkId' when calling ConditionalApi->ConditionalCancel");
            }

            var localVarPath = "/v2/private/stop-order/cancel";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", Configuration.ApiClient.ParameterToString(stopOrderId)));
            }
            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)));
            }
            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            return CallApiWithHttpInfo<V2ConditionalBase<OrderIdRes>>(localVarPath, Method.POST, localVarQueryParams);
        }

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>Task of ConditionalCancelBase</returns>
        public async Task<V2ConditionalBase<OrderIdRes>> ConditionalCancelAsync(string symbol, string stopOrderId = null, string orderLinkId = null) => (await ConditionalCancelAsyncWithHttpInfo(symbol, stopOrderId, orderLinkId)).Data;

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>Task of ApiResponse (ConditionalCancelBase)</returns>
        public Task<ApiResponse<V2ConditionalBase<OrderIdRes>>> ConditionalCancelAsyncWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalCancel");
            }
            // FIXED : According to the document, 'stopOrderId' or 'orderLinkId' is required.
            // see: https://bybit-exchange.github.io/docs/inverse/?console#t-cancelcond
            if (stopOrderId is null && orderLinkId is null)
            {
                throw new ApiException(400, "Missing required parameter 'stopOrderId' or 'orderLinkId' when calling ConditionalApi->ConditionalCancel");
            }

            var localVarPath = "/v2/private/stop-order/cancel";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", Configuration.ApiClient.ParameterToString(stopOrderId)));
            }
            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)));
            }
            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            return CallApiAsyncWithHttpInfo<V2ConditionalBase<OrderIdRes>>(localVarPath, Method.POST, localVarQueryParams);
        }

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>V2ConditionalBase of List of ConditionalCancelAllRes</returns>
        public V2ConditionalBase<List<ConditionalCancelAllRes>> ConditionalCancelAll(string symbol) => ConditionalCancelAllWithHttpInfo(symbol).Data;

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>ApiResponse of V2ConditionalBase (List of ConditionalCancelAllRes)</returns>
        public ApiResponse<V2ConditionalBase<List<ConditionalCancelAllRes>>> ConditionalCancelAllWithHttpInfo(string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalCancelAll");
            }

            var localVarPath = "/v2/private/stop-order/cancelAll";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            return CallApiWithHttpInfo<V2ConditionalBase<List<ConditionalCancelAllRes>>>(localVarPath, Method.POST, localVarQueryParams);
        }

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of V2ConditionalBase (List of ConditionalCancelAllRes)</returns>
        public async Task<V2ConditionalBase<List<ConditionalCancelAllRes>>> ConditionalCancelAllAsync(string symbol) => (await ConditionalCancelAllAsyncWithHttpInfo(symbol)).Data;

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of ApiResponse (V2ConditionalBase (List of ConditionalCancelAllRes))</returns>
        public Task<ApiResponse<V2ConditionalBase<List<ConditionalCancelAllRes>>>> ConditionalCancelAllAsyncWithHttpInfo(string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalCancelAll");
            }

            var localVarPath = "/v2/private/stop-order/cancelAll";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            return CallApiAsyncWithHttpInfo<V2ConditionalBase<List<ConditionalCancelAllRes>>>(localVarPath, Method.POST, localVarQueryParams);
        }

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>Object</returns>
        public object ConditionalGetOrders(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null) => ConditionalGetOrdersWithHttpInfo(symbol, stopOrderStatus, limit, direction, cursor).Data;

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> ConditionalGetOrdersWithHttpInfo(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalGetOrders");
            }

            var localVarPath = "/v2/private/stop-order/list";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }
            if (stopOrderStatus is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_status", stopOrderStatus)); // query parameter
            }
            if (limit is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            }
            if (direction is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            }
            if (cursor is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            return CallApiWithHttpInfo<object>(localVarPath, Method.GET, localVarQueryParams);
        }

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>Task of Object</returns>
        public async Task<object> ConditionalGetOrdersAsync(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null) => (await ConditionalGetOrdersAsyncWithHttpInfo(symbol, stopOrderStatus, limit, direction, cursor)).Data;

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public Task<ApiResponse<object>> ConditionalGetOrdersAsyncWithHttpInfo(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalGetOrders");
            }

            var localVarPath = "/v2/private/stop-order/list";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }
            if (stopOrderStatus is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_status", stopOrderStatus)); // query parameter
            }
            if (limit is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            }
            if (direction is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            }
            if (cursor is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            return CallApiAsyncWithHttpInfo<object>(localVarPath, Method.GET, localVarQueryParams);
        }

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Object</returns>
        public object ConditionalNew(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null) => ConditionalNewWithHttpInfo(side, symbol, orderType, qty, basePrice, stopPx, timeInForce, price, triggerBy, closeOnTrigger, orderLinkId).Data;

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> ConditionalNewWithHttpInfo(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null)
        {
            // verify the required parameter 'side' is set
            if (side is null)
            {
                throw new ApiException(400, "Missing required parameter 'side' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'orderType' is set
            if (orderType is null)
            {
                throw new ApiException(400, "Missing required parameter 'orderType' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'qty' is set
            if (qty is null)
            {
                throw new ApiException(400, "Missing required parameter 'qty' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'basePrice' is set
            if (basePrice is null)
            {
                throw new ApiException(400, "Missing required parameter 'basePrice' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'stopPx' is set
            if (stopPx is null)
            {
                throw new ApiException(400, "Missing required parameter 'stopPx' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'timeInForce' is set
            if (timeInForce is null)
            {
                throw new ApiException(400, "Missing required parameter 'timeInForce' when calling ConditionalApi->ConditionalNew");
            }

            var localVarPath = "/v2/private/stop-order/create";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();

            if (side is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "side", Configuration.ApiClient.ParameterToString(side)));
            }
            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }
            if (orderType is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_type", Configuration.ApiClient.ParameterToString(orderType)));
            }
            if (qty is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "qty", Configuration.ApiClient.ParameterToString(qty)));
            }
            if (price is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "price", Configuration.ApiClient.ParameterToString(price)));
            }
            if (basePrice is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "base_price", Configuration.ApiClient.ParameterToString(basePrice)));
            }
            if (stopPx is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_px", Configuration.ApiClient.ParameterToString(stopPx)));
            }
            if (timeInForce is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "time_in_force", Configuration.ApiClient.ParameterToString(timeInForce)));
            }
            if (triggerBy is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "trigger_by", Configuration.ApiClient.ParameterToString(triggerBy)));
            }
            if (closeOnTrigger is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "close_on_trigger", Configuration.ApiClient.ParameterToString(closeOnTrigger)));
            }
            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            return CallApiWithHttpInfo<object>(localVarPath, Method.POST, localVarQueryParams);
        }

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Task of Object</returns>
        public async Task<object> ConditionalNewAsync(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null) => (await ConditionalNewAsyncWithHttpInfo(side, symbol, orderType, qty, basePrice, stopPx, timeInForce, price, triggerBy, closeOnTrigger, orderLinkId)).Data;

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public Task<ApiResponse<object>> ConditionalNewAsyncWithHttpInfo(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null)
        {
            // verify the required parameter 'side' is set
            if (side is null)
            {
                throw new ApiException(400, "Missing required parameter 'side' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'orderType' is set
            if (orderType is null)
            {
                throw new ApiException(400, "Missing required parameter 'orderType' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'qty' is set
            if (qty is null)
            {
                throw new ApiException(400, "Missing required parameter 'qty' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'basePrice' is set
            if (basePrice is null)
            {
                throw new ApiException(400, "Missing required parameter 'basePrice' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'stopPx' is set
            if (stopPx is null)
            {
                throw new ApiException(400, "Missing required parameter 'stopPx' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'timeInForce' is set
            if (timeInForce is null)
            {
                throw new ApiException(400, "Missing required parameter 'timeInForce' when calling ConditionalApi->ConditionalNew");
            }

            var localVarPath = "/v2/private/stop-order/create";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();

            if (side is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "side", Configuration.ApiClient.ParameterToString(side)));
            }
            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }
            if (orderType is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_type", Configuration.ApiClient.ParameterToString(orderType)));
            }
            if (qty is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "qty", Configuration.ApiClient.ParameterToString(qty)));
            }
            if (price is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "price", Configuration.ApiClient.ParameterToString(price)));
            }
            if (basePrice is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "base_price", Configuration.ApiClient.ParameterToString(basePrice)));
            }
            if (stopPx is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_px", Configuration.ApiClient.ParameterToString(stopPx)));
            }
            if (timeInForce is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "time_in_force", Configuration.ApiClient.ParameterToString(timeInForce)));
            }
            if (triggerBy is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "trigger_by", Configuration.ApiClient.ParameterToString(triggerBy)));
            }
            if (closeOnTrigger is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "close_on_trigger", Configuration.ApiClient.ParameterToString(closeOnTrigger)));
            }
            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            return CallApiAsyncWithHttpInfo<object>(localVarPath, Method.POST, localVarQueryParams);
        }

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>Object</returns>
        public object ConditionalQuery(string stopOrderId = null, string orderLinkId = null, string symbol = null) => ConditionalQueryWithHttpInfo(stopOrderId, orderLinkId, symbol).Data;

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> ConditionalQueryWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null)
        {
            var localVarPath = "/v2/private/stop-order";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", stopOrderId)); // query parameter
            }
            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter
            }
            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            return CallApiWithHttpInfo<object>(localVarPath, Method.GET, localVarQueryParams);
        }

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>Task of Object</returns>
        public async Task<object> ConditionalQueryAsync(string stopOrderId = null, string orderLinkId = null, string symbol = null) => (await ConditionalQueryAsyncWithHttpInfo(stopOrderId, orderLinkId, symbol)).Data;

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public Task<ApiResponse<object>> ConditionalQueryAsyncWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null)
        {
            var localVarPath = "/v2/private/stop-order";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", stopOrderId)); // query parameter
            }
            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter
            }
            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            return CallApiAsyncWithHttpInfo<object>(localVarPath, Method.GET, localVarQueryParams);
        }

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Object</returns>
        public object ConditionalReplace(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null) => ConditionalReplaceWithHttpInfo(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice).Data;

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> ConditionalReplaceWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalReplace");
            }

            var localVarPath = "/v2/private/stop-order/replace";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", Configuration.ApiClient.ParameterToString(stopOrderId)));
            }
            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)));
            }
            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }
            if (pRQty is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_qty", Configuration.ApiClient.ParameterToString(pRQty)));
            }
            if (pRPrice is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_price", Configuration.ApiClient.ParameterToString(pRPrice)));
            }
            if (pRTriggerPrice is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_trigger_price", Configuration.ApiClient.ParameterToString(pRTriggerPrice)));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            return CallApiWithHttpInfo<object>(localVarPath, Method.POST, localVarQueryParams);
        }

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Task of Object</returns>
        public async Task<object> ConditionalReplaceAsync(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null) => (await ConditionalReplaceAsyncWithHttpInfo(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice)).Data;

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public Task<ApiResponse<object>> ConditionalReplaceAsyncWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalReplace");
            }

            var localVarPath = "/v2/private/stop-order/replace";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", Configuration.ApiClient.ParameterToString(stopOrderId)));
            }
            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)));
            }
            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }
            if (pRQty is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_qty", Configuration.ApiClient.ParameterToString(pRQty)));
            }
            if (pRPrice is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_price", Configuration.ApiClient.ParameterToString(pRPrice)));
            }
            if (pRTriggerPrice is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_trigger_price", Configuration.ApiClient.ParameterToString(pRTriggerPrice)));
            }
            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            return CallApiAsyncWithHttpInfo<object>(localVarPath, Method.POST, localVarQueryParams);
        }
    }
}