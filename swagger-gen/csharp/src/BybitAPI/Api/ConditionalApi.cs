/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using BybitAPI.Client;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace BybitAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConditionalApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>Object</returns>
        object ConditionalCancel(string symbol, string stopOrderId = null, string orderLinkId = null);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> ConditionalCancelWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Object</returns>
        object ConditionalCancelAll(string symbol);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> ConditionalCancelAllWithHttpInfo(string symbol);

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>Object</returns>
        object ConditionalGetOrders(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null);

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> ConditionalGetOrdersWithHttpInfo(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null);

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Object</returns>
        object ConditionalNew(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null);

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> ConditionalNewWithHttpInfo(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null);

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>Object</returns>
        object ConditionalQuery(string stopOrderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> ConditionalQueryWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Object</returns>
        object ConditionalReplace(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null);

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> ConditionalReplaceWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<object> ConditionalCancelAsync(string symbol, string stopOrderId = null, string orderLinkId = null);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> ConditionalCancelAsyncWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<object> ConditionalCancelAllAsync(string symbol);

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> ConditionalCancelAllAsyncWithHttpInfo(string symbol);

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<object> ConditionalGetOrdersAsync(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null);

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> ConditionalGetOrdersAsyncWithHttpInfo(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null);

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<object> ConditionalNewAsync(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null);

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> ConditionalNewAsyncWithHttpInfo(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null);

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<object> ConditionalQueryAsync(string stopOrderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> ConditionalQueryAsyncWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<object> ConditionalReplaceAsync(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null);

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> ConditionalReplaceAsyncWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConditionalApi : IConditionalApi
    {
        private BybitAPI.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConditionalApi(string basePath)
        {
            Configuration = new BybitAPI.Client.Configuration { BasePath = basePath };

            ExceptionFactory = BybitAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConditionalApi(BybitAPI.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
            {
                Configuration = BybitAPI.Client.Configuration.Default;
            }
            else
            {
                Configuration = configuration;
            }

            ExceptionFactory = BybitAPI.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BybitAPI.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BybitAPI.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>Object</returns>
        public object ConditionalCancel(string symbol, string stopOrderId = null, string orderLinkId = null)
        {
            var localVarResponse = ConditionalCancelWithHttpInfo(symbol, stopOrderId, orderLinkId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> ConditionalCancelWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalCancel");
            }

            var localVarPath = "/v2/private/stop-order/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (stopOrderId != null)
            {
                localVarFormParams.Add("stop_order_id", Configuration.ApiClient.ParameterToString(stopOrderId)); // form parameter
            }

            if (orderLinkId != null)
            {
                localVarFormParams.Add("order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)); // form parameter
            }

            if (symbol != null)
            {
                localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("ConditionalCancel", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<object> ConditionalCancelAsync(string symbol, string stopOrderId = null, string orderLinkId = null)
        {
            var localVarResponse = await ConditionalCancelAsyncWithHttpInfo(symbol, stopOrderId, orderLinkId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> ConditionalCancelAsyncWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalCancel");
            }

            var localVarPath = "/v2/private/stop-order/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (stopOrderId != null)
            {
                localVarFormParams.Add("stop_order_id", Configuration.ApiClient.ParameterToString(stopOrderId)); // form parameter
            }

            if (orderLinkId != null)
            {
                localVarFormParams.Add("order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)); // form parameter
            }

            if (symbol != null)
            {
                localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("ConditionalCancel", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Object</returns>
        public object ConditionalCancelAll(string symbol)
        {
            var localVarResponse = ConditionalCancelAllWithHttpInfo(symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> ConditionalCancelAllWithHttpInfo(string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalCancelAll");
            }

            var localVarPath = "/v2/private/stop-order/cancelAll";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol != null)
            {
                localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("ConditionalCancelAll", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<object> ConditionalCancelAllAsync(string symbol)
        {
            var localVarResponse = await ConditionalCancelAllAsyncWithHttpInfo(symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel conditional order.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> ConditionalCancelAllAsyncWithHttpInfo(string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalCancelAll");
            }

            var localVarPath = "/v2/private/stop-order/cancelAll";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol != null)
            {
                localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("ConditionalCancelAll", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>Object</returns>
        public object ConditionalGetOrders(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null)
        {
            var localVarResponse = ConditionalGetOrdersWithHttpInfo(symbol, stopOrderStatus, limit, direction, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> ConditionalGetOrdersWithHttpInfo(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalGetOrders");
            }

            var localVarPath = "/v2/private/stop-order/list";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }

            if (stopOrderStatus != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_status", stopOrderStatus)); // query parameter
            }

            if (limit != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            }

            if (direction != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            }

            if (cursor != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("ConditionalGetOrders", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<object> ConditionalGetOrdersAsync(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null)
        {
            var localVarResponse = await ConditionalGetOrdersAsyncWithHttpInfo(symbol, stopOrderStatus, limit, direction, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get my conditional order list.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type</param>
        /// <param name="stopOrderStatus">Stop order status. (optional)</param>
        /// <param name="limit">Limit for data size per page, max size is 50. Default as showing 20 pieces of data per page. (optional)</param>
        /// <param name="direction">Search direction. prev: prev page, next: next page. Defaults to next (optional)</param>
        /// <param name="cursor">Page turning mark，Use return cursor,Sign use origin data, in request please urlencode (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> ConditionalGetOrdersAsyncWithHttpInfo(string symbol, string stopOrderStatus = null, decimal? limit = null, string direction = null, string cursor = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalGetOrders");
            }

            var localVarPath = "/v2/private/stop-order/list";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }

            if (stopOrderStatus != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_status", stopOrderStatus)); // query parameter
            }

            if (limit != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            }

            if (direction != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            }

            if (cursor != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cursor", cursor)); // query parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("ConditionalGetOrders", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Object</returns>
        public object ConditionalNew(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null)
        {
            var localVarResponse = ConditionalNewWithHttpInfo(side, symbol, orderType, qty, basePrice, stopPx, timeInForce, price, triggerBy, closeOnTrigger, orderLinkId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> ConditionalNewWithHttpInfo(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null)
        {
            // verify the required parameter 'side' is set
            if (side == null)
            {
                throw new ApiException(400, "Missing required parameter 'side' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'orderType' is set
            if (orderType == null)
            {
                throw new ApiException(400, "Missing required parameter 'orderType' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'qty' is set
            if (qty == null)
            {
                throw new ApiException(400, "Missing required parameter 'qty' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'basePrice' is set
            if (basePrice == null)
            {
                throw new ApiException(400, "Missing required parameter 'basePrice' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'stopPx' is set
            if (stopPx == null)
            {
                throw new ApiException(400, "Missing required parameter 'stopPx' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'timeInForce' is set
            if (timeInForce == null)
            {
                throw new ApiException(400, "Missing required parameter 'timeInForce' when calling ConditionalApi->ConditionalNew");
            }

            var localVarPath = "/v2/private/stop-order/create";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (side != null)
            {
                localVarFormParams.Add("side", Configuration.ApiClient.ParameterToString(side)); // form parameter
            }

            if (symbol != null)
            {
                localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            }

            if (orderType != null)
            {
                localVarFormParams.Add("order_type", Configuration.ApiClient.ParameterToString(orderType)); // form parameter
            }

            if (qty != null)
            {
                localVarFormParams.Add("qty", Configuration.ApiClient.ParameterToString(qty)); // form parameter
            }

            if (price != null)
            {
                localVarFormParams.Add("price", Configuration.ApiClient.ParameterToString(price)); // form parameter
            }

            if (basePrice != null)
            {
                localVarFormParams.Add("base_price", Configuration.ApiClient.ParameterToString(basePrice)); // form parameter
            }

            if (stopPx != null)
            {
                localVarFormParams.Add("stop_px", Configuration.ApiClient.ParameterToString(stopPx)); // form parameter
            }

            if (timeInForce != null)
            {
                localVarFormParams.Add("time_in_force", Configuration.ApiClient.ParameterToString(timeInForce)); // form parameter
            }

            if (triggerBy != null)
            {
                localVarFormParams.Add("trigger_by", Configuration.ApiClient.ParameterToString(triggerBy)); // form parameter
            }

            if (closeOnTrigger != null)
            {
                localVarFormParams.Add("close_on_trigger", Configuration.ApiClient.ParameterToString(closeOnTrigger)); // form parameter
            }

            if (orderLinkId != null)
            {
                localVarFormParams.Add("order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)); // form parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("ConditionalNew", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<object> ConditionalNewAsync(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null)
        {
            var localVarResponse = await ConditionalNewAsyncWithHttpInfo(side, symbol, orderType, qty, basePrice, stopPx, timeInForce, price, triggerBy, closeOnTrigger, orderLinkId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Place a new conditional order.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="side">Side.</param>
        /// <param name="symbol">Contract type.</param>
        /// <param name="orderType">Conditional order type.</param>
        /// <param name="qty">Order quantity.</param>
        /// <param name="basePrice">Send current market price. It will be used to compare with the value of &#39;stop_px&#39;, to decide whether your conditional order will be triggered by crossing trigger price from upper side or lower side. Mainly used to identify the expected direction of the current conditional order..</param>
        /// <param name="stopPx">Trigger price.</param>
        /// <param name="timeInForce">Time in force.</param>
        /// <param name="price">Execution price for conditional order (optional)</param>
        /// <param name="triggerBy">Trigger price type. Default LastPrice. (optional)</param>
        /// <param name="closeOnTrigger">close on trigger. (optional)</param>
        /// <param name="orderLinkId">Customized order ID, maximum length at 36 characters, and order ID under the same agency has to be unique.. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> ConditionalNewAsyncWithHttpInfo(string side, string symbol, string orderType, string qty, string basePrice, string stopPx, string timeInForce, string price = null, string triggerBy = null, bool? closeOnTrigger = null, string orderLinkId = null)
        {
            // verify the required parameter 'side' is set
            if (side == null)
            {
                throw new ApiException(400, "Missing required parameter 'side' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'orderType' is set
            if (orderType == null)
            {
                throw new ApiException(400, "Missing required parameter 'orderType' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'qty' is set
            if (qty == null)
            {
                throw new ApiException(400, "Missing required parameter 'qty' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'basePrice' is set
            if (basePrice == null)
            {
                throw new ApiException(400, "Missing required parameter 'basePrice' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'stopPx' is set
            if (stopPx == null)
            {
                throw new ApiException(400, "Missing required parameter 'stopPx' when calling ConditionalApi->ConditionalNew");
            }
            // verify the required parameter 'timeInForce' is set
            if (timeInForce == null)
            {
                throw new ApiException(400, "Missing required parameter 'timeInForce' when calling ConditionalApi->ConditionalNew");
            }

            var localVarPath = "/v2/private/stop-order/create";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (side != null)
            {
                localVarFormParams.Add("side", Configuration.ApiClient.ParameterToString(side)); // form parameter
            }

            if (symbol != null)
            {
                localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            }

            if (orderType != null)
            {
                localVarFormParams.Add("order_type", Configuration.ApiClient.ParameterToString(orderType)); // form parameter
            }

            if (qty != null)
            {
                localVarFormParams.Add("qty", Configuration.ApiClient.ParameterToString(qty)); // form parameter
            }

            if (price != null)
            {
                localVarFormParams.Add("price", Configuration.ApiClient.ParameterToString(price)); // form parameter
            }

            if (basePrice != null)
            {
                localVarFormParams.Add("base_price", Configuration.ApiClient.ParameterToString(basePrice)); // form parameter
            }

            if (stopPx != null)
            {
                localVarFormParams.Add("stop_px", Configuration.ApiClient.ParameterToString(stopPx)); // form parameter
            }

            if (timeInForce != null)
            {
                localVarFormParams.Add("time_in_force", Configuration.ApiClient.ParameterToString(timeInForce)); // form parameter
            }

            if (triggerBy != null)
            {
                localVarFormParams.Add("trigger_by", Configuration.ApiClient.ParameterToString(triggerBy)); // form parameter
            }

            if (closeOnTrigger != null)
            {
                localVarFormParams.Add("close_on_trigger", Configuration.ApiClient.ParameterToString(closeOnTrigger)); // form parameter
            }

            if (orderLinkId != null)
            {
                localVarFormParams.Add("order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)); // form parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("ConditionalNew", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>Object</returns>
        public object ConditionalQuery(string stopOrderId = null, string orderLinkId = null, string symbol = null)
        {
            var localVarResponse = ConditionalQueryWithHttpInfo(stopOrderId, orderLinkId, symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> ConditionalQueryWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null)
        {
            var localVarPath = "/v2/private/stop-order";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (stopOrderId != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", stopOrderId)); // query parameter
            }

            if (orderLinkId != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter
            }

            if (symbol != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("ConditionalQuery", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<object> ConditionalQueryAsync(string stopOrderId = null, string orderLinkId = null, string symbol = null)
        {
            var localVarResponse = await ConditionalQueryAsyncWithHttpInfo(stopOrderId, orderLinkId, symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Query real-time stop order information.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId">Order ID of conditional order. (optional)</param>
        /// <param name="orderLinkId">Agency customized order ID. (optional)</param>
        /// <param name="symbol">Contract type. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> ConditionalQueryAsyncWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null)
        {
            var localVarPath = "/v2/private/stop-order";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (stopOrderId != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", stopOrderId)); // query parameter
            }

            if (orderLinkId != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter
            }

            if (symbol != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("ConditionalQuery", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Object</returns>
        public object ConditionalReplace(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null)
        {
            var localVarResponse = ConditionalReplaceWithHttpInfo(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> ConditionalReplaceWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalReplace");
            }

            var localVarPath = "/v2/private/stop-order/replace";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (stopOrderId != null)
            {
                localVarFormParams.Add("stop_order_id", Configuration.ApiClient.ParameterToString(stopOrderId)); // form parameter
            }

            if (orderLinkId != null)
            {
                localVarFormParams.Add("order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)); // form parameter
            }

            if (symbol != null)
            {
                localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            }

            if (pRQty != null)
            {
                localVarFormParams.Add("p_r_qty", Configuration.ApiClient.ParameterToString(pRQty)); // form parameter
            }

            if (pRPrice != null)
            {
                localVarFormParams.Add("p_r_price", Configuration.ApiClient.ParameterToString(pRPrice)); // form parameter
            }

            if (pRTriggerPrice != null)
            {
                localVarFormParams.Add("p_r_trigger_price", Configuration.ApiClient.ParameterToString(pRTriggerPrice)); // form parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("ConditionalReplace", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<object> ConditionalReplaceAsync(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null)
        {
            var localVarResponse = await ConditionalReplaceAsyncWithHttpInfo(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace conditional order. Only incomplete orders can be modified.
        /// </summary>
        /// <exception cref="BybitAPI.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <param name="stopOrderId">Stop order ID. (optional)</param>
        /// <param name="orderLinkId">Order Link ID. (optional)</param>
        /// <param name="pRQty">Order quantity. (optional)</param>
        /// <param name="pRPrice">Order price. (optional)</param>
        /// <param name="pRTriggerPrice">Trigger price. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> ConditionalReplaceAsyncWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, string pRPrice = null, string pRTriggerPrice = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol == null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling ConditionalApi->ConditionalReplace");
            }

            var localVarPath = "/v2/private/stop-order/replace";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (stopOrderId != null)
            {
                localVarFormParams.Add("stop_order_id", Configuration.ApiClient.ParameterToString(stopOrderId)); // form parameter
            }

            if (orderLinkId != null)
            {
                localVarFormParams.Add("order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)); // form parameter
            }

            if (symbol != null)
            {
                localVarFormParams.Add("symbol", Configuration.ApiClient.ParameterToString(symbol)); // form parameter
            }

            if (pRQty != null)
            {
                localVarFormParams.Add("p_r_qty", Configuration.ApiClient.ParameterToString(pRQty)); // form parameter
            }

            if (pRPrice != null)
            {
                localVarFormParams.Add("p_r_price", Configuration.ApiClient.ParameterToString(pRPrice)); // form parameter
            }

            if (pRTriggerPrice != null)
            {
                localVarFormParams.Add("p_r_trigger_price", Configuration.ApiClient.ParameterToString(pRTriggerPrice)); // form parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }
            // authentication (apiSignature) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("sign")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", Configuration.GetApiKeyWithPrefix("sign")));
            }
            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("ConditionalReplace", localVarResponse);
                if (exception != null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }
    }
}
