/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using BybitAPI.Client;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;

namespace BybitAPI.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILinearConditionalApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Cancel Active Order
        /// </summary>
        /// <remarks>
        /// This will cancel linear active order
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Object</returns>
        object LinearConditionalCancel(string stopOrderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Cancel Active Order
        /// </summary>
        /// <remarks>
        /// This will cancel linear active order
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> LinearConditionalCancelWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Cancel all stop orders.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Object</returns>
        object LinearConditionalCancelAll(string symbol);

        /// <summary>
        /// Cancel all stop orders.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> LinearConditionalCancelAllWithHttpInfo(string symbol);

        /// <summary>
        /// Get linear Stop Orders
        /// </summary>
        /// <remarks>
        /// This will get linear active orders
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="stopOrderStatus"> (optional)</param>
        /// <returns>Object</returns>
        object LinearConditionalGetOrders(string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, string page = null, string limit = null, string stopOrderStatus = null);

        /// <summary>
        /// Get linear Stop Orders
        /// </summary>
        /// <remarks>
        /// This will get linear active orders
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="stopOrderStatus"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> LinearConditionalGetOrdersWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, string page = null, string limit = null, string stopOrderStatus = null);

        /// <summary>
        /// Create linear stop Order
        /// </summary>
        /// <remarks>
        /// This will create linear stop order
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="basePrice"> (optional)</param>
        /// <param name="stopPx"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="triggerBy"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <returns>Object</returns>
        object LinearConditionalNew(string symbol = null, string side = null, string orderType = null, double? qty = null, double? price = null, double? basePrice = null, double? stopPx = null, string timeInForce = null, string triggerBy = null, bool? reduceOnly = null, bool? closeOnTrigger = null, string orderLinkId = null, double? takeProfit = null, double? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null);

        /// <summary>
        /// Create linear stop Order
        /// </summary>
        /// <remarks>
        /// This will create linear stop order
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="basePrice"> (optional)</param>
        /// <param name="stopPx"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="triggerBy"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> LinearConditionalNewWithHttpInfo(string symbol = null, string side = null, string orderType = null, double? qty = null, double? price = null, double? basePrice = null, double? stopPx = null, string timeInForce = null, string triggerBy = null, bool? reduceOnly = null, bool? closeOnTrigger = null, string orderLinkId = null, double? takeProfit = null, double? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null);

        /// <summary>
        /// Get Stop Orders(real-time)
        /// </summary>
        /// <remarks>
        /// This will get linear stop orders(real-time)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Object</returns>
        object LinearConditionalQuery(string symbol = null, string stopOrderId = null, string orderLinkId = null);

        /// <summary>
        /// Get Stop Orders(real-time)
        /// </summary>
        /// <remarks>
        /// This will get linear stop orders(real-time)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> LinearConditionalQueryWithHttpInfo(string symbol = null, string stopOrderId = null, string orderLinkId = null);

        /// <summary>
        /// Replace conditional order
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <param name="pRTriggerPrice"> (optional)</param>
        /// <returns>Object</returns>
        object LinearConditionalReplace(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, decimal? pRPrice = null, decimal? pRTriggerPrice = null);

        /// <summary>
        /// Replace conditional order
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <param name="pRTriggerPrice"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> LinearConditionalReplaceWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, decimal? pRPrice = null, decimal? pRTriggerPrice = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        /// Cancel Active Order
        /// </summary>
        /// <remarks>
        /// This will cancel linear active order
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of Object</returns>
        Task<object> LinearConditionalCancelAsync(string stopOrderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Cancel Active Order
        /// </summary>
        /// <remarks>
        /// This will cancel linear active order
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> LinearConditionalCancelAsyncWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null);

        /// <summary>
        /// Cancel all stop orders.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of Object</returns>
        Task<object> LinearConditionalCancelAllAsync(string symbol);

        /// <summary>
        /// Cancel all stop orders.
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> LinearConditionalCancelAllAsyncWithHttpInfo(string symbol);

        /// <summary>
        /// Get linear Stop Orders
        /// </summary>
        /// <remarks>
        /// This will get linear active orders
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="stopOrderStatus"> (optional)</param>
        /// <returns>Task of Object</returns>
        Task<object> LinearConditionalGetOrdersAsync(string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, string page = null, string limit = null, string stopOrderStatus = null);

        /// <summary>
        /// Get linear Stop Orders
        /// </summary>
        /// <remarks>
        /// This will get linear active orders
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="stopOrderStatus"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> LinearConditionalGetOrdersAsyncWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, string page = null, string limit = null, string stopOrderStatus = null);

        /// <summary>
        /// Create linear stop Order
        /// </summary>
        /// <remarks>
        /// This will create linear stop order
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="basePrice"> (optional)</param>
        /// <param name="stopPx"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="triggerBy"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <returns>Task of Object</returns>
        Task<object> LinearConditionalNewAsync(string symbol = null, string side = null, string orderType = null, double? qty = null, double? price = null, double? basePrice = null, double? stopPx = null, string timeInForce = null, string triggerBy = null, bool? reduceOnly = null, bool? closeOnTrigger = null, string orderLinkId = null, double? takeProfit = null, double? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null);

        /// <summary>
        /// Create linear stop Order
        /// </summary>
        /// <remarks>
        /// This will create linear stop order
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="basePrice"> (optional)</param>
        /// <param name="stopPx"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="triggerBy"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> LinearConditionalNewAsyncWithHttpInfo(string symbol = null, string side = null, string orderType = null, double? qty = null, double? price = null, double? basePrice = null, double? stopPx = null, string timeInForce = null, string triggerBy = null, bool? reduceOnly = null, bool? closeOnTrigger = null, string orderLinkId = null, double? takeProfit = null, double? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null);

        /// <summary>
        /// Get Stop Orders(real-time)
        /// </summary>
        /// <remarks>
        /// This will get linear stop orders(real-time)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Task of Object</returns>
        Task<object> LinearConditionalQueryAsync(string symbol = null, string stopOrderId = null, string orderLinkId = null);

        /// <summary>
        /// Get Stop Orders(real-time)
        /// </summary>
        /// <remarks>
        /// This will get linear stop orders(real-time)
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> LinearConditionalQueryAsyncWithHttpInfo(string symbol = null, string stopOrderId = null, string orderLinkId = null);

        /// <summary>
        /// Replace conditional order
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <param name="pRTriggerPrice"> (optional)</param>
        /// <returns>Task of Object</returns>
        Task<object> LinearConditionalReplaceAsync(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, decimal? pRPrice = null, decimal? pRTriggerPrice = null);

        /// <summary>
        /// Replace conditional order
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <param name="pRTriggerPrice"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        Task<ApiResponse<object>> LinearConditionalReplaceAsyncWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, decimal? pRPrice = null, decimal? pRTriggerPrice = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LinearConditionalApi : ILinearConditionalApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LinearConditionalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LinearConditionalApi(string basePath)
        {
            Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LinearConditionalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LinearConditionalApi(Configuration configuration = null)
        {
            if (configuration is null) // use the default one in Configuration
            {
                Configuration = Configuration.Default;
            }
            else
            {
                Configuration = configuration;
            }

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath() => Configuration.ApiClient.RestClient.BaseUrl.ToString();

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory is not null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set => _exceptionFactory = value;
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader() => new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value) => Configuration.AddDefaultHeader(key, value);

        /// <summary>
        /// Cancel Active Order This will cancel linear active order
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Object</returns>
        public object LinearConditionalCancel(string stopOrderId = null, string orderLinkId = null, string symbol = null)
        {
            var localVarResponse = LinearConditionalCancelWithHttpInfo(stopOrderId, orderLinkId, symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Active Order This will cancel linear active order
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> LinearConditionalCancelWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null)
        {
            var localVarPath = "/private/linear/stop-order/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", Configuration.ApiClient.ParameterToString(stopOrderId)));
            }

            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)));
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("LinearConditionalCancel", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Cancel Active Order This will cancel linear active order
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async Task<object> LinearConditionalCancelAsync(string stopOrderId = null, string orderLinkId = null, string symbol = null)
        {
            var localVarResponse = await LinearConditionalCancelAsyncWithHttpInfo(stopOrderId, orderLinkId, symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Active Order This will cancel linear active order
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async Task<ApiResponse<object>> LinearConditionalCancelAsyncWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null)
        {
            var localVarPath = "/private/linear/stop-order/cancel";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", Configuration.ApiClient.ParameterToString(stopOrderId)));
            }

            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)));
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("LinearConditionalCancel", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Cancel all stop orders.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Object</returns>
        public object LinearConditionalCancelAll(string symbol)
        {
            var localVarResponse = LinearConditionalCancelAllWithHttpInfo(symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all stop orders.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> LinearConditionalCancelAllWithHttpInfo(string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling LinearConditionalApi->LinearConditionalCancelAll");
            }

            var localVarPath = "/private/linear/stop-order/cancel-all";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("LinearConditionalCancelAll", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Cancel all stop orders.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of Object</returns>
        public async Task<object> LinearConditionalCancelAllAsync(string symbol)
        {
            var localVarResponse = await LinearConditionalCancelAllAsyncWithHttpInfo(symbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel all stop orders.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol">Contract type.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async Task<ApiResponse<object>> LinearConditionalCancelAllAsyncWithHttpInfo(string symbol)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling LinearConditionalApi->LinearConditionalCancelAll");
            }

            var localVarPath = "/private/linear/stop-order/cancel-all";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("LinearConditionalCancelAll", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get linear Stop Orders This will get linear active orders
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="stopOrderStatus"> (optional)</param>
        /// <returns>Object</returns>
        public object LinearConditionalGetOrders(string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, string page = null, string limit = null, string stopOrderStatus = null)
        {
            var localVarResponse = LinearConditionalGetOrdersWithHttpInfo(stopOrderId, orderLinkId, symbol, order, page, limit, stopOrderStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get linear Stop Orders This will get linear active orders
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="stopOrderStatus"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> LinearConditionalGetOrdersWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, string page = null, string limit = null, string stopOrderStatus = null)
        {
            var localVarPath = "/private/linear/stop-order/list";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", stopOrderId)); // query parameter
            }

            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }

            if (order is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            }

            if (page is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            }

            if (limit is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            }

            if (stopOrderStatus is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_status", stopOrderStatus)); // query parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("LinearConditionalGetOrders", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get linear Stop Orders This will get linear active orders
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="stopOrderStatus"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async Task<object> LinearConditionalGetOrdersAsync(string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, string page = null, string limit = null, string stopOrderStatus = null)
        {
            var localVarResponse = await LinearConditionalGetOrdersAsyncWithHttpInfo(stopOrderId, orderLinkId, symbol, order, page, limit, stopOrderStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get linear Stop Orders This will get linear active orders
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="symbol"> (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="stopOrderStatus"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async Task<ApiResponse<object>> LinearConditionalGetOrdersAsyncWithHttpInfo(string stopOrderId = null, string orderLinkId = null, string symbol = null, string order = null, string page = null, string limit = null, string stopOrderStatus = null)
        {
            var localVarPath = "/private/linear/stop-order/list";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", stopOrderId)); // query parameter
            }

            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }

            if (order is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            }

            if (page is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            }

            if (limit is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            }

            if (stopOrderStatus is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_status", stopOrderStatus)); // query parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("LinearConditionalGetOrders", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Create linear stop Order This will create linear stop order
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="basePrice"> (optional)</param>
        /// <param name="stopPx"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="triggerBy"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <returns>Object</returns>
        public object LinearConditionalNew(string symbol = null, string side = null, string orderType = null, double? qty = null, double? price = null, double? basePrice = null, double? stopPx = null, string timeInForce = null, string triggerBy = null, bool? reduceOnly = null, bool? closeOnTrigger = null, string orderLinkId = null, double? takeProfit = null, double? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null)
        {
            var localVarResponse = LinearConditionalNewWithHttpInfo(symbol, side, orderType, qty, price, basePrice, stopPx, timeInForce, triggerBy, reduceOnly, closeOnTrigger, orderLinkId, takeProfit, stopLoss, tpTriggerBy, slTriggerBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create linear stop Order This will create linear stop order
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="basePrice"> (optional)</param>
        /// <param name="stopPx"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="triggerBy"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> LinearConditionalNewWithHttpInfo(string symbol = null, string side = null, string orderType = null, double? qty = null, double? price = null, double? basePrice = null, double? stopPx = null, string timeInForce = null, string triggerBy = null, bool? reduceOnly = null, bool? closeOnTrigger = null, string orderLinkId = null, double? takeProfit = null, double? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null)
        {
            var localVarPath = "/private/linear/stop-order/create";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            if (side is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "side", Configuration.ApiClient.ParameterToString(side)));
            }

            if (orderType is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_type", Configuration.ApiClient.ParameterToString(orderType)));
            }

            if (qty is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "qty", Configuration.ApiClient.ParameterToString(qty)));
            }

            if (price is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "price", Configuration.ApiClient.ParameterToString(price)));
            }

            if (basePrice is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "base_price", Configuration.ApiClient.ParameterToString(basePrice)));
            }

            if (stopPx is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_px", Configuration.ApiClient.ParameterToString(stopPx)));
            }

            if (timeInForce is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "time_in_force", Configuration.ApiClient.ParameterToString(timeInForce)));
            }

            if (triggerBy is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "trigger_by", Configuration.ApiClient.ParameterToString(triggerBy)));
            }

            if (reduceOnly is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "reduce_only", Configuration.ApiClient.ParameterToString(reduceOnly)));
            }

            if (closeOnTrigger is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "close_on_trigger", Configuration.ApiClient.ParameterToString(closeOnTrigger)));
            }

            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)));
            }

            if (takeProfit is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "take_profit", Configuration.ApiClient.ParameterToString(takeProfit)));
            }

            if (stopLoss is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_loss", Configuration.ApiClient.ParameterToString(stopLoss)));
            }

            if (tpTriggerBy is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tp_trigger_by", Configuration.ApiClient.ParameterToString(tpTriggerBy)));
            }

            if (slTriggerBy is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sl_trigger_by", Configuration.ApiClient.ParameterToString(slTriggerBy)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("LinearConditionalNew", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Create linear stop Order This will create linear stop order
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="basePrice"> (optional)</param>
        /// <param name="stopPx"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="triggerBy"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async Task<object> LinearConditionalNewAsync(string symbol = null, string side = null, string orderType = null, double? qty = null, double? price = null, double? basePrice = null, double? stopPx = null, string timeInForce = null, string triggerBy = null, bool? reduceOnly = null, bool? closeOnTrigger = null, string orderLinkId = null, double? takeProfit = null, double? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null)
        {
            var localVarResponse = await LinearConditionalNewAsyncWithHttpInfo(symbol, side, orderType, qty, price, basePrice, stopPx, timeInForce, triggerBy, reduceOnly, closeOnTrigger, orderLinkId, takeProfit, stopLoss, tpTriggerBy, slTriggerBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create linear stop Order This will create linear stop order
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="side"> (optional)</param>
        /// <param name="orderType"> (optional)</param>
        /// <param name="qty"> (optional)</param>
        /// <param name="price"> (optional)</param>
        /// <param name="basePrice"> (optional)</param>
        /// <param name="stopPx"> (optional)</param>
        /// <param name="timeInForce"> (optional)</param>
        /// <param name="triggerBy"> (optional)</param>
        /// <param name="reduceOnly"> (optional)</param>
        /// <param name="closeOnTrigger"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="takeProfit"> (optional)</param>
        /// <param name="stopLoss"> (optional)</param>
        /// <param name="tpTriggerBy"> (optional)</param>
        /// <param name="slTriggerBy"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async Task<ApiResponse<object>> LinearConditionalNewAsyncWithHttpInfo(string symbol = null, string side = null, string orderType = null, double? qty = null, double? price = null, double? basePrice = null, double? stopPx = null, string timeInForce = null, string triggerBy = null, bool? reduceOnly = null, bool? closeOnTrigger = null, string orderLinkId = null, double? takeProfit = null, double? stopLoss = null, string tpTriggerBy = null, string slTriggerBy = null)
        {
            var localVarPath = "/private/linear/stop-order/create";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            if (side is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "side", Configuration.ApiClient.ParameterToString(side)));
            }

            if (orderType is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_type", Configuration.ApiClient.ParameterToString(orderType)));
            }

            if (qty is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "qty", Configuration.ApiClient.ParameterToString(qty)));
            }

            if (price is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "price", Configuration.ApiClient.ParameterToString(price)));
            }

            if (basePrice is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "base_price", Configuration.ApiClient.ParameterToString(basePrice)));
            }

            if (stopPx is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_px", Configuration.ApiClient.ParameterToString(stopPx)));
            }

            if (timeInForce is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "time_in_force", Configuration.ApiClient.ParameterToString(timeInForce)));
            }

            if (triggerBy is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "trigger_by", Configuration.ApiClient.ParameterToString(triggerBy)));
            }

            if (reduceOnly is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "reduce_only", Configuration.ApiClient.ParameterToString(reduceOnly)));
            }

            if (closeOnTrigger is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "close_on_trigger", Configuration.ApiClient.ParameterToString(closeOnTrigger)));
            }

            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)));
            }

            if (takeProfit is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "take_profit", Configuration.ApiClient.ParameterToString(takeProfit)));
            }

            if (stopLoss is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_loss", Configuration.ApiClient.ParameterToString(stopLoss)));
            }

            if (tpTriggerBy is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tp_trigger_by", Configuration.ApiClient.ParameterToString(tpTriggerBy)));
            }

            if (slTriggerBy is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sl_trigger_by", Configuration.ApiClient.ParameterToString(slTriggerBy)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("LinearConditionalNew", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get Stop Orders(real-time) This will get linear stop orders(real-time)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Object</returns>
        public object LinearConditionalQuery(string symbol = null, string stopOrderId = null, string orderLinkId = null)
        {
            var localVarResponse = LinearConditionalQueryWithHttpInfo(symbol, stopOrderId, orderLinkId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Stop Orders(real-time) This will get linear stop orders(real-time)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> LinearConditionalQueryWithHttpInfo(string symbol = null, string stopOrderId = null, string orderLinkId = null)
        {
            var localVarPath = "/private/linear/stop-order/search";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", stopOrderId)); // query parameter
            }

            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("LinearConditionalQuery", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get Stop Orders(real-time) This will get linear stop orders(real-time)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async Task<object> LinearConditionalQueryAsync(string symbol = null, string stopOrderId = null, string orderLinkId = null)
        {
            var localVarResponse = await LinearConditionalQueryAsyncWithHttpInfo(symbol, stopOrderId, orderLinkId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Stop Orders(real-time) This will get linear stop orders(real-time)
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"> (optional)</param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async Task<ApiResponse<object>> LinearConditionalQueryAsyncWithHttpInfo(string symbol = null, string stopOrderId = null, string orderLinkId = null)
        {
            var localVarPath = "/private/linear/stop-order/search";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", symbol)); // query parameter
            }

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", stopOrderId)); // query parameter
            }

            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", orderLinkId)); // query parameter
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("LinearConditionalQuery", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Replace conditional order
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <param name="pRTriggerPrice"> (optional)</param>
        /// <returns>Object</returns>
        public object LinearConditionalReplace(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, decimal? pRPrice = null, decimal? pRTriggerPrice = null)
        {
            var localVarResponse = LinearConditionalReplaceWithHttpInfo(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace conditional order
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <param name="pRTriggerPrice"> (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<object> LinearConditionalReplaceWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, decimal? pRPrice = null, decimal? pRTriggerPrice = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling LinearConditionalApi->LinearConditionalReplace");
            }

            var localVarPath = "/private/linear/stop-order/replace";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", Configuration.ApiClient.ParameterToString(stopOrderId)));
            }

            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)));
            }

            if (pRQty is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_qty", Configuration.ApiClient.ParameterToString(pRQty)));
            }

            if (pRPrice is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_price", Configuration.ApiClient.ParameterToString(pRPrice)));
            }

            if (pRTriggerPrice is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_trigger_price", Configuration.ApiClient.ParameterToString(pRTriggerPrice)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("LinearConditionalReplace", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Replace conditional order
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <param name="pRTriggerPrice"> (optional)</param>
        /// <returns>Task of Object</returns>
        public async Task<object> LinearConditionalReplaceAsync(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, decimal? pRPrice = null, decimal? pRTriggerPrice = null)
        {
            var localVarResponse = await LinearConditionalReplaceAsyncWithHttpInfo(symbol, stopOrderId, orderLinkId, pRQty, pRPrice, pRTriggerPrice);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace conditional order
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="symbol"></param>
        /// <param name="stopOrderId"> (optional)</param>
        /// <param name="orderLinkId"> (optional)</param>
        /// <param name="pRQty"> (optional)</param>
        /// <param name="pRPrice"> (optional)</param>
        /// <param name="pRTriggerPrice"> (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async Task<ApiResponse<object>> LinearConditionalReplaceAsyncWithHttpInfo(string symbol, string stopOrderId = null, string orderLinkId = null, string pRQty = null, decimal? pRPrice = null, decimal? pRTriggerPrice = null)
        {
            // verify the required parameter 'symbol' is set
            if (symbol is null)
            {
                throw new ApiException(400, "Missing required parameter 'symbol' when calling LinearConditionalApi->LinearConditionalReplace");
            }

            var localVarPath = "/private/linear/stop-order/replace";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new string[] {
                "application/json"
            };
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept is not null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (symbol is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "symbol", Configuration.ApiClient.ParameterToString(symbol)));
            }

            if (stopOrderId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "stop_order_id", Configuration.ApiClient.ParameterToString(stopOrderId)));
            }

            if (orderLinkId is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "order_link_id", Configuration.ApiClient.ParameterToString(orderLinkId)));
            }

            if (pRQty is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_qty", Configuration.ApiClient.ParameterToString(pRQty)));
            }

            if (pRPrice is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_price", Configuration.ApiClient.ParameterToString(pRPrice)));
            }

            if (pRTriggerPrice is not null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "p_r_trigger_price", Configuration.ApiClient.ParameterToString(pRTriggerPrice)));
            }

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("api_key")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "api_key", Configuration.GetApiKeyWithPrefix("api_key")));
            }

            // authentication (timestamp) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "timestamp", Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            var param = new SortedDictionary<string, string>(localVarQueryParams.ToDictionary(x => x.Key, x => x.Value));
            var secret = Configuration.GetApiKeyWithPrefix("api_secret");
            var sign = Util.ApiUtil.CreateSignature(secret, param);
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "sign", sign));

            // make the HTTP request
            var localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory is not null)
            {
                var exception = ExceptionFactory("LinearConditionalReplace", localVarResponse);
                if (exception is not null)
                {
                    throw exception;
                }
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }
    }
}