/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    [DataContract]
    public partial class LCPInfoListBase : IEquatable<LCPInfoListBase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LCPInfoBase" /> class.
        /// </summary>
        /// <param name="retCode">retCode.</param>
        /// <param name="retMsg">retMsg.</param>
        /// <param name="extCode">extCode.</param>
        /// <param name="extInfo">extInfo.</param>
        /// <param name="result">result.</param>
        /// <param name="timeNow">timeNow.</param>
        public LCPInfoListBase(List<LCPInfo> lcpList = default) => LcpList = lcpList;

        [DataMember(Name = "lcp_list", EmitDefaultValue = false)]
        public List<LCPInfo> LcpList { get; set; }

        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LCPInfoListBase {\n");
            sb.Append("  LcpList: ").Append(LcpList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

        public override bool Equals(object input) => Equals(input as LCPInfoListBase);

        public bool Equals(LCPInfoListBase input)
        {
            if (input is null)
            {
                return false;
            }

            return
                (
                    LcpList == input.LcpList ||
                    (LcpList is not null &&
                    LcpList.Equals(input.LcpList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (LcpList is not null)
                {
                    hashCode = hashCode * 59 + LcpList.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}