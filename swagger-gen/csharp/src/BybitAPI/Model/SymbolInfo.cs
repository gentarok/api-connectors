/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// SymbolInfo
    /// </summary>
    [DataContract]
    public partial class SymbolInfo : IEquatable<SymbolInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolInfo" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="baseCurrency">baseCurrency.</param>
        /// <param name="quoteCurrency">quoteCurrency.</param>
        /// <param name="priceScale">priceScale.</param>
        /// <param name="priceFilter">priceFilter.</param>
        /// <param name="lotSizeFilter">lotSizeFilter.</param>
        public SymbolInfo(string name = default, string baseCurrency = default, string quoteCurrency = default, decimal? priceScale = default, object priceFilter = default, object lotSizeFilter = default)
        {
            Name = name;
            BaseCurrency = baseCurrency;
            QuoteCurrency = quoteCurrency;
            PriceScale = priceScale;
            PriceFilter = priceFilter;
            LotSizeFilter = lotSizeFilter;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets BaseCurrency
        /// </summary>
        [DataMember(Name = "base_currency", EmitDefaultValue = false)]
        public string BaseCurrency { get; set; }

        /// <summary>
        /// Gets or Sets QuoteCurrency
        /// </summary>
        [DataMember(Name = "quote_currency", EmitDefaultValue = false)]
        public string QuoteCurrency { get; set; }

        /// <summary>
        /// Gets or Sets PriceScale
        /// </summary>
        [DataMember(Name = "price_scale", EmitDefaultValue = false)]
        public decimal? PriceScale { get; set; }

        /// <summary>
        /// Gets or Sets PriceFilter
        /// </summary>
        [DataMember(Name = "price_filter", EmitDefaultValue = false)]
        public object PriceFilter { get; set; }

        /// <summary>
        /// Gets or Sets LotSizeFilter
        /// </summary>
        [DataMember(Name = "lot_size_filter", EmitDefaultValue = false)]
        public object LotSizeFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SymbolInfo {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BaseCurrency: ").Append(BaseCurrency).Append("\n");
            sb.Append("  QuoteCurrency: ").Append(QuoteCurrency).Append("\n");
            sb.Append("  PriceScale: ").Append(PriceScale).Append("\n");
            sb.Append("  PriceFilter: ").Append(PriceFilter).Append("\n");
            sb.Append("  LotSizeFilter: ").Append(LotSizeFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as SymbolInfo);
        }

        /// <summary>
        /// Returns true if SymbolInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SymbolInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SymbolInfo input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) &&
                (
                    BaseCurrency == input.BaseCurrency ||
                    (BaseCurrency != null &&
                    BaseCurrency.Equals(input.BaseCurrency))
                ) &&
                (
                    QuoteCurrency == input.QuoteCurrency ||
                    (QuoteCurrency != null &&
                    QuoteCurrency.Equals(input.QuoteCurrency))
                ) &&
                (
                    PriceScale == input.PriceScale ||
                    (PriceScale != null &&
                    PriceScale.Equals(input.PriceScale))
                ) &&
                (
                    PriceFilter == input.PriceFilter ||
                    (PriceFilter != null &&
                    PriceFilter.Equals(input.PriceFilter))
                ) &&
                (
                    LotSizeFilter == input.LotSizeFilter ||
                    (LotSizeFilter != null &&
                    LotSizeFilter.Equals(input.LotSizeFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Name != null)
                {
                    hashCode = hashCode * 59 + Name.GetHashCode();
                }

                if (BaseCurrency != null)
                {
                    hashCode = hashCode * 59 + BaseCurrency.GetHashCode();
                }

                if (QuoteCurrency != null)
                {
                    hashCode = hashCode * 59 + QuoteCurrency.GetHashCode();
                }

                if (PriceScale != null)
                {
                    hashCode = hashCode * 59 + PriceScale.GetHashCode();
                }

                if (PriceFilter != null)
                {
                    hashCode = hashCode * 59 + PriceFilter.GetHashCode();
                }

                if (LotSizeFilter != null)
                {
                    hashCode = hashCode * 59 + LotSizeFilter.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
