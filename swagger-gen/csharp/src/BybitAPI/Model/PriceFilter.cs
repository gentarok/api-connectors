/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// PriceFilter
    /// </summary>
    [DataContract]
    public partial class PriceFilter : IEquatable<PriceFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PriceFilter" /> class.
        /// </summary>
        /// <param name="minPrice">minPrice.</param>
        /// <param name="maxPrice">maxPrice.</param>
        /// <param name="tickSize">tickSize.</param>
        public PriceFilter(string minPrice = default, string maxPrice = default, string tickSize = default)
        {
            MinPrice = minPrice;
            MaxPrice = maxPrice;
            TickSize = tickSize;
        }

        /// <summary>
        /// Gets or Sets MinPrice
        /// </summary>
        [DataMember(Name = "min_price", EmitDefaultValue = false)]
        public string MinPrice { get; set; }

        /// <summary>
        /// Gets or Sets MaxPrice
        /// </summary>
        [DataMember(Name = "max_price", EmitDefaultValue = false)]
        public string MaxPrice { get; set; }

        /// <summary>
        /// Gets or Sets TickSize
        /// </summary>
        [DataMember(Name = "tick_size", EmitDefaultValue = false)]
        public string TickSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PriceFilter {\n");
            sb.Append("  MinPrice: ").Append(MinPrice).Append("\n");
            sb.Append("  MaxPrice: ").Append(MaxPrice).Append("\n");
            sb.Append("  TickSize: ").Append(TickSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as PriceFilter);
        }

        /// <summary>
        /// Returns true if PriceFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of PriceFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PriceFilter input)
        {
            if (input is null)
            {
                return false;
            }

            return
                (
                    MinPrice == input.MinPrice ||
                    (MinPrice is not null &&
                    MinPrice.Equals(input.MinPrice))
                ) &&
                (
                    MaxPrice == input.MaxPrice ||
                    (MaxPrice is not null &&
                    MaxPrice.Equals(input.MaxPrice))
                ) &&
                (
                    TickSize == input.TickSize ||
                    (TickSize is not null &&
                    TickSize.Equals(input.TickSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (MinPrice is not null)
                {
                    hashCode = hashCode * 59 + MinPrice.GetHashCode();
                }

                if (MaxPrice is not null)
                {
                    hashCode = hashCode * 59 + MaxPrice.GetHashCode();
                }

                if (TickSize is not null)
                {
                    hashCode = hashCode * 59 + TickSize.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
