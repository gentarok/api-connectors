/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// Get withdraw records response
    /// </summary>
    [DataContract]
    public partial class WithdrawRecords : IEquatable<WithdrawRecords>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WithdrawRecords" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userId">userId.</param>
        /// <param name="coin">coin.</param>
        /// <param name="status">status.</param>
        /// <param name="amount">amount.</param>
        /// <param name="fee">fee.</param>
        /// <param name="address">address.</param>
        /// <param name="txId">txId.</param>
        /// <param name="submitedAt">submitedAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public WithdrawRecords(decimal? id = default, decimal? userId = default, string coin = default, string status = default, string amount = default, string fee = default, string address = default, string txId = default, string submitedAt = default, string updatedAt = default)
        {
            Id = id;
            UserId = userId;
            Coin = coin;
            Status = status;
            Amount = amount;
            Fee = fee;
            Address = address;
            TxId = txId;
            SubmitedAt = submitedAt;
            UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public decimal? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Coin
        /// </summary>
        [DataMember(Name = "coin", EmitDefaultValue = false)]
        public string Coin { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name = "fee", EmitDefaultValue = false)]
        public string Fee { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets TxId
        /// </summary>
        [DataMember(Name = "tx_id", EmitDefaultValue = false)]
        public string TxId { get; set; }

        /// <summary>
        /// Gets or Sets SubmitedAt
        /// </summary>
        [DataMember(Name = "submited_at", EmitDefaultValue = false)]
        public string SubmitedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WithdrawRecords {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Coin: ").Append(Coin).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  TxId: ").Append(TxId).Append("\n");
            sb.Append("  SubmitedAt: ").Append(SubmitedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input) => Equals(input as WithdrawRecords);

        /// <summary>
        /// Returns true if WithdrawRecords instances are equal
        /// </summary>
        /// <param name="input">Instance of WithdrawRecords to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WithdrawRecords input)
        {
            if (input is null)
            {
                return false;
            }

            return
                (
                    Id == input.Id ||
                    (Id is not null &&
                    Id.Equals(input.Id))
                ) &&
                (
                    UserId == input.UserId ||
                    (UserId is not null &&
                    UserId.Equals(input.UserId))
                ) &&
                (
                    Coin == input.Coin ||
                    (Coin is not null &&
                    Coin.Equals(input.Coin))
                ) &&
                (
                    Status == input.Status ||
                    (Status is not null &&
                    Status.Equals(input.Status))
                ) &&
                (
                    Amount == input.Amount ||
                    (Amount is not null &&
                    Amount.Equals(input.Amount))
                ) &&
                (
                    Fee == input.Fee ||
                    (Fee is not null &&
                    Fee.Equals(input.Fee))
                ) &&
                (
                    Address == input.Address ||
                    (Address is not null &&
                    Address.Equals(input.Address))
                ) &&
                (
                    TxId == input.TxId ||
                    (TxId is not null &&
                    TxId.Equals(input.TxId))
                ) &&
                (
                    SubmitedAt == input.SubmitedAt ||
                    (SubmitedAt is not null &&
                    SubmitedAt.Equals(input.SubmitedAt))
                ) &&
                (
                    UpdatedAt == input.UpdatedAt ||
                    (UpdatedAt is not null &&
                    UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id is not null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }

                if (UserId is not null)
                {
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                }

                if (Coin is not null)
                {
                    hashCode = hashCode * 59 + Coin.GetHashCode();
                }

                if (Status is not null)
                {
                    hashCode = hashCode * 59 + Status.GetHashCode();
                }

                if (Amount is not null)
                {
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                }

                if (Fee is not null)
                {
                    hashCode = hashCode * 59 + Fee.GetHashCode();
                }

                if (Address is not null)
                {
                    hashCode = hashCode * 59 + Address.GetHashCode();
                }

                if (TxId is not null)
                {
                    hashCode = hashCode * 59 + TxId.GetHashCode();
                }

                if (SubmitedAt is not null)
                {
                    hashCode = hashCode * 59 + SubmitedAt.GetHashCode();
                }

                if (UpdatedAt is not null)
                {
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
