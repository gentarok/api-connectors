/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// Query LCP info.
    /// </summary>
    [DataContract]
    public partial class LCPInfo : IEquatable<LCPInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LCPInfo" /> class.
        /// </summary>
        /// <param name="date">date.</param>
        /// <param name="selfRatio">selfRatio.</param>
        /// <param name="platformRatio">platformRatio.</param>
        /// <param name="score">score.</param>
        public LCPInfo(string date = default, decimal? selfRatio = default, decimal? platformRatio = default, decimal? score = default)
        {
            Date = date;
            SelfRatio = selfRatio;
            PlatformRatio = platformRatio;
            Score = score;
        }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name = "date", EmitDefaultValue = false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets SelfRatio
        /// </summary>
        [DataMember(Name = "self_ratio", EmitDefaultValue = false)]
        public decimal? SelfRatio { get; set; }

        /// <summary>
        /// Gets or Sets PlatformRatio
        /// </summary>
        [DataMember(Name = "platform_ratio", EmitDefaultValue = false)]
        public decimal? PlatformRatio { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [DataMember(Name = "score", EmitDefaultValue = false)]
        public decimal? Score { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LCPInfoBase {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  SelfRatio: ").Append(SelfRatio).Append("\n");
            sb.Append("  PlatformRatio: ").Append(PlatformRatio).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input) => Equals(input as LCPInfo);

        /// <summary>
        /// Returns true if LCPInfoBase instances are equal
        /// </summary>
        /// <param name="input">Instance of LCPInfoBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LCPInfo input)
        {
            if (input is null)
            {
                return false;
            }

            return
                (
                    Date == input.Date ||
                    (Date is not null &&
                    Date.Equals(input.Date))
                ) &&
                (
                    SelfRatio == input.SelfRatio ||
                    (SelfRatio is not null &&
                    SelfRatio.Equals(input.SelfRatio))
                ) &&
                (
                    PlatformRatio == input.PlatformRatio ||
                    (PlatformRatio is not null &&
                    PlatformRatio.Equals(input.PlatformRatio))
                ) &&
                (
                    Score == input.Score ||
                    (Score is not null &&
                    Score.Equals(input.Score))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Date is not null)
                {
                    hashCode = hashCode * 59 + Date.GetHashCode();
                }

                if (SelfRatio is not null)
                {
                    hashCode = hashCode * 59 + SelfRatio.GetHashCode();
                }

                if (PlatformRatio is not null)
                {
                    hashCode = hashCode * 59 + PlatformRatio.GetHashCode();
                }

                if (Score is not null)
                {
                    hashCode = hashCode * 59 + Score.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}