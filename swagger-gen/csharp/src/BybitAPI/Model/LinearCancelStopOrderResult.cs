/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// Cancel Linear Stop Order
    /// </summary>
    [DataContract]
    public partial class LinearCancelStopOrderResult : IEquatable<LinearCancelStopOrderResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinearCancelStopOrderResult" /> class.
        /// </summary>
        /// <param name="stopOrderId">stopOrderId.</param>
        public LinearCancelStopOrderResult(string stopOrderId = default)
        {
            StopOrderId = stopOrderId;
        }

        /// <summary>
        /// Gets or Sets StopOrderId
        /// </summary>
        [DataMember(Name = "stop_order_id", EmitDefaultValue = false)]
        public string StopOrderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinearCancelStopOrderResult {\n");
            sb.Append("  StopOrderId: ").Append(StopOrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as LinearCancelStopOrderResult);
        }

        /// <summary>
        /// Returns true if LinearCancelStopOrderResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LinearCancelStopOrderResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinearCancelStopOrderResult input)
        {
            if (input is null)
            {
                return false;
            }

            return
                (
                    StopOrderId == input.StopOrderId ||
                    (StopOrderId is not null &&
                    StopOrderId.Equals(input.StopOrderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (StopOrderId is not null)
                {
                    hashCode = hashCode * 59 + StopOrderId.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
