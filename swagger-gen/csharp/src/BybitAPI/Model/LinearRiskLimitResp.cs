/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// LinearRiskLimitResp
    /// </summary>
    [DataContract]
    public partial class LinearRiskLimitResp : IEquatable<LinearRiskLimitResp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinearRiskLimitResp" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="id">id.</param>
        /// <param name="isLowestRisk">isLowestRisk.</param>
        /// <param name="limit">limit.</param>
        /// <param name="maintainMargin">maintainMargin.</param>
        /// <param name="section">section.</param>
        /// <param name="startingMargin">startingMargin.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public LinearRiskLimitResp(string createdAt = default, int? id = default, int? isLowestRisk = default, long? limit = default, double? maintainMargin = default, List<string> section = default, double? startingMargin = default, string symbol = default, string updatedAt = default)
        {
            CreatedAt = createdAt;
            Id = id;
            IsLowestRisk = isLowestRisk;
            Limit = limit;
            MaintainMargin = maintainMargin;
            Section = section;
            StartingMargin = startingMargin;
            Symbol = symbol;
            UpdatedAt = updatedAt;
        }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsLowestRisk
        /// </summary>
        [DataMember(Name = "is_lowest_risk", EmitDefaultValue = false)]
        public int? IsLowestRisk { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public long? Limit { get; set; }

        /// <summary>
        /// Gets or Sets MaintainMargin
        /// </summary>
        [DataMember(Name = "maintain_margin", EmitDefaultValue = false)]
        public double? MaintainMargin { get; set; }

        /// <summary>
        /// Gets or Sets Section
        /// </summary>
        [DataMember(Name = "section", EmitDefaultValue = false)]
        public List<string> Section { get; set; }

        /// <summary>
        /// Gets or Sets StartingMargin
        /// </summary>
        [DataMember(Name = "starting_margin", EmitDefaultValue = false)]
        public double? StartingMargin { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinearRiskLimitResp {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsLowestRisk: ").Append(IsLowestRisk).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  MaintainMargin: ").Append(MaintainMargin).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  StartingMargin: ").Append(StartingMargin).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as LinearRiskLimitResp);
        }

        /// <summary>
        /// Returns true if LinearRiskLimitResp instances are equal
        /// </summary>
        /// <param name="input">Instance of LinearRiskLimitResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinearRiskLimitResp input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    CreatedAt == input.CreatedAt ||
                    (CreatedAt != null &&
                    CreatedAt.Equals(input.CreatedAt))
                ) &&
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) &&
                (
                    IsLowestRisk == input.IsLowestRisk ||
                    (IsLowestRisk != null &&
                    IsLowestRisk.Equals(input.IsLowestRisk))
                ) &&
                (
                    Limit == input.Limit ||
                    (Limit != null &&
                    Limit.Equals(input.Limit))
                ) &&
                (
                    MaintainMargin == input.MaintainMargin ||
                    (MaintainMargin != null &&
                    MaintainMargin.Equals(input.MaintainMargin))
                ) &&
                (
                    Section == input.Section ||
                    Section != null &&
                    Section.SequenceEqual(input.Section)
                ) &&
                (
                    StartingMargin == input.StartingMargin ||
                    (StartingMargin != null &&
                    StartingMargin.Equals(input.StartingMargin))
                ) &&
                (
                    Symbol == input.Symbol ||
                    (Symbol != null &&
                    Symbol.Equals(input.Symbol))
                ) &&
                (
                    UpdatedAt == input.UpdatedAt ||
                    (UpdatedAt != null &&
                    UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (CreatedAt != null)
                {
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                }

                if (Id != null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }

                if (IsLowestRisk != null)
                {
                    hashCode = hashCode * 59 + IsLowestRisk.GetHashCode();
                }

                if (Limit != null)
                {
                    hashCode = hashCode * 59 + Limit.GetHashCode();
                }

                if (MaintainMargin != null)
                {
                    hashCode = hashCode * 59 + MaintainMargin.GetHashCode();
                }

                if (Section != null)
                {
                    hashCode = hashCode * 59 + Section.GetHashCode();
                }

                if (StartingMargin != null)
                {
                    hashCode = hashCode * 59 + StartingMargin.GetHashCode();
                }

                if (Symbol != null)
                {
                    hashCode = hashCode * 59 + Symbol.GetHashCode();
                }

                if (UpdatedAt != null)
                {
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}