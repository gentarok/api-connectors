/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// Cancel all conditional order response
    /// </summary>
    [DataContract]
    public partial class ConditionalCancelAllRes : IEquatable<ConditionalCancelAllRes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionalCancelAllRes" /> class.
        /// </summary>
        /// <param name="clOrdID">clOrdID.</param>
        /// <param name="userId">userId.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="side">side.</param>
        /// <param name="orderType">orderType.</param>
        /// <param name="price">price.</param>
        /// <param name="qty">qty.</param>
        /// <param name="timeInForce">timeInForce.</param>
        /// <param name="createType">createType.</param>
        /// <param name="cancelType">cancelType.</param>
        /// <param name="orderStatus">orderStatus.</param>
        /// <param name="leavesValue">leavesValue.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="crossStatus">crossStatus.</param>
        /// <param name="crossSeq">crossSeq.</param>
        /// <param name="stopOrderType">stopOrderType.</param>
        /// <param name="triggerBy">triggerBy.</param>
        /// <param name="basePrice">basePrice.</param>
        /// <param name="trailValue">trailValue.</param>
        /// <param name="expectedDirection">expectedDirection.</param>

        public ConditionalCancelAllRes(
            string clOrdID = default,
            decimal? userId = default,
            string symbol = default,
            string side = default,
            string orderType = default,
            decimal? price = default,
            decimal? qty = default,
            string timeInForce = default,
            string createType = default,
            string cancelType = default,
            string orderStatus = default,
            decimal? leavesValue = default,
            string createdAt = default,
            string updatedAt = default,
            string crossStatus = default,
            decimal? crossSeq = default,
            string stopOrderType = default,
            string triggerBy = default,
            decimal? basePrice = default,
            decimal? trailValue = default,
            string expectedDirection = default)
        {
            ClOrdID = clOrdID;
            UserId = userId;
            Symbol = symbol;
            Side = side;
            OrderType = orderType;
            Price = price;
            Qty = qty;
            TimeInForce = timeInForce;
            CreateType = createType;
            CancelType = cancelType;
            OrderStatus = orderStatus;
            //LeavesQty = leavesQty;
            LeavesValue = leavesValue;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            CrossStatus = crossStatus;
            CrossSeq = crossSeq;
            StopOrderType = stopOrderType;
            TriggerBy = triggerBy;
            BasePrice = basePrice;
            TrailValue = trailValue;
            ExpectedDirection = expectedDirection;
        }

        /// <summary>
        /// Gets or Sets ClOrdID
        /// </summary>
        [DataMember(Name = "clOrdID", EmitDefaultValue = false)]
        public string ClOrdID { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public decimal? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name = "side", EmitDefaultValue = false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [DataMember(Name = "order_type", EmitDefaultValue = false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public decimal? Price { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name = "qty", EmitDefaultValue = false)]
        public decimal? Qty { get; set; }

        /// <summary>
        /// Gets or Sets TimeInForce
        /// </summary>
        [DataMember(Name = "time_in_force", EmitDefaultValue = false)]
        public string TimeInForce { get; set; }

        /// <summary>
        /// Gets or Sets CreateType
        /// </summary>
        [DataMember(Name = "create_type", EmitDefaultValue = false)]
        public string CreateType { get; set; }

        /// <summary>
        /// Gets or Sets CancelType
        /// </summary>
        [DataMember(Name = "cancel_type", EmitDefaultValue = false)]
        public string CancelType { get; set; }

        /// <summary>
        /// Gets or Sets OrderStatus
        /// </summary>
        [DataMember(Name = "order_status", EmitDefaultValue = false)]
        public string OrderStatus { get; set; }

        /// <summary>
        /// Gets or Sets LeavesValue
        /// </summary>
        [DataMember(Name = "leaves_value", EmitDefaultValue = false)]
        public decimal? LeavesValue { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CrossStatus
        /// </summary>
        [DataMember(Name = "cross_status", EmitDefaultValue = false)]
        public string CrossStatus { get; set; }

        /// <summary>
        /// Gets or Sets CrossSeq
        /// </summary>
        [DataMember(Name = "cross_seq", EmitDefaultValue = false)]
        public decimal? CrossSeq { get; set; }

        /// <summary>
        /// Gets or Sets StopOrderType
        /// </summary>
        [DataMember(Name = "stop_order_type", EmitDefaultValue = false)]
        public string StopOrderType { get; set; }

        /// <summary>
        /// Gets or Sets TriggerBy
        /// </summary>
        [DataMember(Name = "trigger_by", EmitDefaultValue = false)]
        public string TriggerBy { get; set; }

        /// <summary>
        /// Gets or Sets BasePrice
        /// </summary>
        [DataMember(Name = "base_price", EmitDefaultValue = false)]
        public decimal? BasePrice { get; set; }

        /// <summary>
        /// Gets or Sets TrailValue
        /// </summary>
        [DataMember(Name = "trail_value", EmitDefaultValue = false)]
        public decimal? TrailValue { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedDirection
        /// </summary>
        [DataMember(Name = "expected_direction", EmitDefaultValue = false)]
        public string ExpectedDirection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConditionalCancelAllRes {\n");
            sb.Append("  ClOrdID: ").Append(ClOrdID).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  CreateType: ").Append(CreateType).Append("\n");
            sb.Append("  CancelType: ").Append(CancelType).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  LeavesValue: ").Append(LeavesValue).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CrossStatus: ").Append(CrossStatus).Append("\n");
            sb.Append("  CrossSeq: ").Append(CrossSeq).Append("\n");
            sb.Append("  StopOrderType: ").Append(StopOrderType).Append("\n");
            sb.Append("  TriggerBy: ").Append(TriggerBy).Append("\n");
            sb.Append("  BasePrice: ").Append(BasePrice).Append("\n");
            sb.Append("  TrailValue: ").Append(TrailValue).Append("\n");
            sb.Append("  ExpectedDirection: ").Append(ExpectedDirection).Append("\n");

            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input) => Equals(input as ConditionalCancelAllRes);

        /// <summary>
        /// Returns true if ConditionalCancelAllRes instances are equal
        /// </summary>
        /// <param name="input">Instance of ConditionalCancelAllRes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConditionalCancelAllRes input)
        {
            if (input is null)
            {
                return false;
            }

            return
                (
                    ClOrdID == input.ClOrdID ||
                    (ClOrdID is not null &&
                    ClOrdID.Equals(input.ClOrdID))
                ) &&
                (
                    UserId == input.UserId ||
                    (UserId is not null &&
                    UserId.Equals(input.UserId))
                ) &&
                (
                    Symbol == input.Symbol ||
                    (Symbol is not null &&
                    Symbol.Equals(input.Symbol))
                ) &&
                (
                    Side == input.Side ||
                    (Side is not null &&
                    Side.Equals(input.Side))
                ) &&
                (
                    OrderType == input.OrderType ||
                    (OrderType is not null &&
                    OrderType.Equals(input.OrderType))
                ) &&
                (
                    Price == input.Price ||
                    (Price is not null &&
                    Price.Equals(input.Price))
                ) &&
                (
                    Qty == input.Qty ||
                    (Qty is not null &&
                    Qty.Equals(input.Qty))
                ) &&
                (
                    TimeInForce == input.TimeInForce ||
                    (TimeInForce is not null &&
                    TimeInForce.Equals(input.TimeInForce))
                ) &&
                (
                    CreateType == input.CreateType ||
                    (CreateType is not null &&
                    CreateType.Equals(input.CreateType))
                ) &&
                (
                    CancelType == input.CancelType ||
                    (CancelType is not null &&
                    CancelType.Equals(input.CancelType))
                ) &&
                (
                    OrderStatus == input.OrderStatus ||
                    (OrderStatus is not null &&
                    OrderStatus.Equals(input.OrderStatus))
                ) &&
                (
                    LeavesValue == input.LeavesValue ||
                    (LeavesValue is not null &&
                    LeavesValue.Equals(input.LeavesValue))
                ) &&
                (
                    CreatedAt == input.CreatedAt ||
                    (CreatedAt is not null &&
                    CreatedAt.Equals(input.CreatedAt))
                ) &&
                (
                    UpdatedAt == input.UpdatedAt ||
                    (UpdatedAt is not null &&
                    UpdatedAt.Equals(input.UpdatedAt))
                ) &&
                (
                    CrossStatus == input.CrossStatus ||
                    (CrossStatus is not null &&
                    CrossStatus.Equals(input.CrossStatus))
                ) &&
                (
                    CrossSeq == input.CrossSeq ||
                    (CrossSeq is not null &&
                    CrossSeq.Equals(input.CrossSeq))
                ) &&
                (
                    StopOrderType == input.StopOrderType ||
                    (StopOrderType is not null &&
                    StopOrderType.Equals(input.StopOrderType))
                ) &&
                (
                    TriggerBy == input.TriggerBy ||
                    (TriggerBy is not null &&
                    TriggerBy.Equals(input.TriggerBy))
                ) &&
                (
                    BasePrice == input.BasePrice ||
                    (BasePrice is not null &&
                    BasePrice.Equals(input.BasePrice))
                ) &&
                (
                    TrailValue == input.TrailValue ||
                    (TrailValue is not null &&
                    TrailValue.Equals(input.TrailValue))
                ) &&
                (
                    ExpectedDirection == input.ExpectedDirection ||
                    (ExpectedDirection is not null &&
                    ExpectedDirection.Equals(input.ExpectedDirection))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ClOrdID is not null)
                {
                    hashCode = hashCode * 59 + ClOrdID.GetHashCode();
                }

                if (UserId is not null)
                {
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                }

                if (Symbol is not null)
                {
                    hashCode = hashCode * 59 + Symbol.GetHashCode();
                }

                if (Side is not null)
                {
                    hashCode = hashCode * 59 + Side.GetHashCode();
                }

                if (OrderType is not null)
                {
                    hashCode = hashCode * 59 + OrderType.GetHashCode();
                }

                if (Price is not null)
                {
                    hashCode = hashCode * 59 + Price.GetHashCode();
                }

                if (Qty is not null)
                {
                    hashCode = hashCode * 59 + Qty.GetHashCode();
                }

                if (TimeInForce is not null)
                {
                    hashCode = hashCode * 59 + TimeInForce.GetHashCode();
                }

                if (CreateType is not null)
                {
                    hashCode = hashCode * 59 + CreateType.GetHashCode();
                }

                if (CancelType is not null)
                {
                    hashCode = hashCode * 59 + CancelType.GetHashCode();
                }

                if (OrderStatus is not null)
                {
                    hashCode = hashCode * 59 + OrderStatus.GetHashCode();
                }

                if (LeavesValue is not null)
                {
                    hashCode = hashCode * 59 + LeavesValue.GetHashCode();
                }

                if (CreatedAt is not null)
                {
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                }

                if (UpdatedAt is not null)
                {
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                }

                if (CrossStatus is not null)
                {
                    hashCode = hashCode * 59 + CrossStatus.GetHashCode();
                }

                if (CrossSeq is not null)
                {
                    hashCode = hashCode * 59 + CrossSeq.GetHashCode();
                }

                if (StopOrderType is not null)
                {
                    hashCode = hashCode * 59 + StopOrderType.GetHashCode();
                }

                if (TriggerBy is not null)
                {
                    hashCode = hashCode * 59 + TriggerBy.GetHashCode();
                }

                if (BasePrice is not null)
                {
                    hashCode = hashCode * 59 + BasePrice.GetHashCode();
                }

                if (TrailValue is not null)
                {
                    hashCode = hashCode * 59 + TrailValue.GetHashCode();
                }

                if (ExpectedDirection is not null)
                {
                    hashCode = hashCode * 59 + ExpectedDirection.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}