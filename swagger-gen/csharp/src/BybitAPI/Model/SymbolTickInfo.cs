/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// Get the orderbook response
    /// </summary>
    [DataContract]
    public partial class SymbolTickInfo : IEquatable<SymbolTickInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SymbolTickInfo" /> class.
        /// </summary>
        /// <param name="symbol">symbol.</param>
        /// <param name="bidPrice">bidPrice.</param>
        /// <param name="askPrice">askPrice.</param>
        /// <param name="lastPrice">lastPrice.</param>
        /// <param name="lastTickDirection">lastTickDirection.</param>
        /// <param name="prevPrice24h">prevPrice24h.</param>
        /// <param name="price24hPcnt">price24hPcnt.</param>
        /// <param name="highPrice24h">highPrice24h.</param>
        /// <param name="lowPrice24h">lowPrice24h.</param>
        /// <param name="prevPrice1h">prevPrice1h.</param>
        /// <param name="price1hPcnt">price1hPcnt.</param>
        /// <param name="markPrice">markPrice.</param>
        /// <param name="indexPrice">indexPrice.</param>
        /// <param name="openInterest">openInterest.</param>
        /// <param name="openValue">openValue.</param>
        /// <param name="totalTurnover">totalTurnover.</param>
        /// <param name="turnover24h">turnover24h.</param>
        /// <param name="totalVolume">totalVolume.</param>
        /// <param name="volume24h">volume24h.</param>
        /// <param name="fundingRate">fundingRate.</param>
        /// <param name="predictedFundingRate">predictedFundingRate.</param>
        /// <param name="nextFundingTime">nextFundingTime.</param>
        /// <param name="countdownHour">countdownHour.</param>
        public SymbolTickInfo(string symbol = default, string bidPrice = default, string askPrice = default, string lastPrice = default, string lastTickDirection = default, string prevPrice24h = default, string price24hPcnt = default, string highPrice24h = default, string lowPrice24h = default, string prevPrice1h = default, string price1hPcnt = default, string markPrice = default, string indexPrice = default, decimal? openInterest = default, string openValue = default, string totalTurnover = default, string turnover24h = default, decimal? totalVolume = default, decimal? volume24h = default, string fundingRate = default, string predictedFundingRate = default, string nextFundingTime = default, decimal? countdownHour = default)
        {
            Symbol = symbol;
            BidPrice = bidPrice;
            AskPrice = askPrice;
            LastPrice = lastPrice;
            LastTickDirection = lastTickDirection;
            PrevPrice24h = prevPrice24h;
            Price24hPcnt = price24hPcnt;
            HighPrice24h = highPrice24h;
            LowPrice24h = lowPrice24h;
            PrevPrice1h = prevPrice1h;
            Price1hPcnt = price1hPcnt;
            MarkPrice = markPrice;
            IndexPrice = indexPrice;
            OpenInterest = openInterest;
            OpenValue = openValue;
            TotalTurnover = totalTurnover;
            Turnover24h = turnover24h;
            TotalVolume = totalVolume;
            Volume24h = volume24h;
            FundingRate = fundingRate;
            PredictedFundingRate = predictedFundingRate;
            NextFundingTime = nextFundingTime;
            CountdownHour = countdownHour;
        }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets BidPrice
        /// </summary>
        [DataMember(Name = "bid_price", EmitDefaultValue = false)]
        public string BidPrice { get; set; }

        /// <summary>
        /// Gets or Sets AskPrice
        /// </summary>
        [DataMember(Name = "ask_price", EmitDefaultValue = false)]
        public string AskPrice { get; set; }

        /// <summary>
        /// Gets or Sets LastPrice
        /// </summary>
        [DataMember(Name = "last_price", EmitDefaultValue = false)]
        public string LastPrice { get; set; }

        /// <summary>
        /// Gets or Sets LastTickDirection
        /// </summary>
        [DataMember(Name = "last_tick_direction", EmitDefaultValue = false)]
        public string LastTickDirection { get; set; }

        /// <summary>
        /// Gets or Sets PrevPrice24h
        /// </summary>
        [DataMember(Name = "prev_price_24h", EmitDefaultValue = false)]
        public string PrevPrice24h { get; set; }

        /// <summary>
        /// Gets or Sets Price24hPcnt
        /// </summary>
        [DataMember(Name = "price_24h_pcnt", EmitDefaultValue = false)]
        public string Price24hPcnt { get; set; }

        /// <summary>
        /// Gets or Sets HighPrice24h
        /// </summary>
        [DataMember(Name = "high_price_24h", EmitDefaultValue = false)]
        public string HighPrice24h { get; set; }

        /// <summary>
        /// Gets or Sets LowPrice24h
        /// </summary>
        [DataMember(Name = "low_price_24h", EmitDefaultValue = false)]
        public string LowPrice24h { get; set; }

        /// <summary>
        /// Gets or Sets PrevPrice1h
        /// </summary>
        [DataMember(Name = "prev_price_1h", EmitDefaultValue = false)]
        public string PrevPrice1h { get; set; }

        /// <summary>
        /// Gets or Sets Price1hPcnt
        /// </summary>
        [DataMember(Name = "price_1h_pcnt", EmitDefaultValue = false)]
        public string Price1hPcnt { get; set; }

        /// <summary>
        /// Gets or Sets MarkPrice
        /// </summary>
        [DataMember(Name = "mark_price", EmitDefaultValue = false)]
        public string MarkPrice { get; set; }

        /// <summary>
        /// Gets or Sets IndexPrice
        /// </summary>
        [DataMember(Name = "index_price", EmitDefaultValue = false)]
        public string IndexPrice { get; set; }

        /// <summary>
        /// Gets or Sets OpenInterest
        /// </summary>
        [DataMember(Name = "open_interest", EmitDefaultValue = false)]
        public decimal? OpenInterest { get; set; }

        /// <summary>
        /// Gets or Sets OpenValue
        /// </summary>
        [DataMember(Name = "open_value", EmitDefaultValue = false)]
        public string OpenValue { get; set; }

        /// <summary>
        /// Gets or Sets TotalTurnover
        /// </summary>
        [DataMember(Name = "total_turnover", EmitDefaultValue = false)]
        public string TotalTurnover { get; set; }

        /// <summary>
        /// Gets or Sets Turnover24h
        /// </summary>
        [DataMember(Name = "turnover_24h", EmitDefaultValue = false)]
        public string Turnover24h { get; set; }

        /// <summary>
        /// Gets or Sets TotalVolume
        /// </summary>
        [DataMember(Name = "total_volume", EmitDefaultValue = false)]
        public decimal? TotalVolume { get; set; }

        /// <summary>
        /// Gets or Sets Volume24h
        /// </summary>
        [DataMember(Name = "volume_24h", EmitDefaultValue = false)]
        public decimal? Volume24h { get; set; }

        /// <summary>
        /// Gets or Sets FundingRate
        /// </summary>
        [DataMember(Name = "funding_rate", EmitDefaultValue = false)]
        public string FundingRate { get; set; }

        /// <summary>
        /// Gets or Sets PredictedFundingRate
        /// </summary>
        [DataMember(Name = "predicted_funding_rate", EmitDefaultValue = false)]
        public string PredictedFundingRate { get; set; }

        /// <summary>
        /// Gets or Sets NextFundingTime
        /// </summary>
        [DataMember(Name = "next_funding_time", EmitDefaultValue = false)]
        public string NextFundingTime { get; set; }

        /// <summary>
        /// Gets or Sets CountdownHour
        /// </summary>
        [DataMember(Name = "countdown_hour", EmitDefaultValue = false)]
        public decimal? CountdownHour { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SymbolTickInfo {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  BidPrice: ").Append(BidPrice).Append("\n");
            sb.Append("  AskPrice: ").Append(AskPrice).Append("\n");
            sb.Append("  LastPrice: ").Append(LastPrice).Append("\n");
            sb.Append("  LastTickDirection: ").Append(LastTickDirection).Append("\n");
            sb.Append("  PrevPrice24h: ").Append(PrevPrice24h).Append("\n");
            sb.Append("  Price24hPcnt: ").Append(Price24hPcnt).Append("\n");
            sb.Append("  HighPrice24h: ").Append(HighPrice24h).Append("\n");
            sb.Append("  LowPrice24h: ").Append(LowPrice24h).Append("\n");
            sb.Append("  PrevPrice1h: ").Append(PrevPrice1h).Append("\n");
            sb.Append("  Price1hPcnt: ").Append(Price1hPcnt).Append("\n");
            sb.Append("  MarkPrice: ").Append(MarkPrice).Append("\n");
            sb.Append("  IndexPrice: ").Append(IndexPrice).Append("\n");
            sb.Append("  OpenInterest: ").Append(OpenInterest).Append("\n");
            sb.Append("  OpenValue: ").Append(OpenValue).Append("\n");
            sb.Append("  TotalTurnover: ").Append(TotalTurnover).Append("\n");
            sb.Append("  Turnover24h: ").Append(Turnover24h).Append("\n");
            sb.Append("  TotalVolume: ").Append(TotalVolume).Append("\n");
            sb.Append("  Volume24h: ").Append(Volume24h).Append("\n");
            sb.Append("  FundingRate: ").Append(FundingRate).Append("\n");
            sb.Append("  PredictedFundingRate: ").Append(PredictedFundingRate).Append("\n");
            sb.Append("  NextFundingTime: ").Append(NextFundingTime).Append("\n");
            sb.Append("  CountdownHour: ").Append(CountdownHour).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input) => Equals(input as SymbolTickInfo);

        /// <summary>
        /// Returns true if SymbolTickInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of SymbolTickInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SymbolTickInfo input)
        {
            if (input is null)
            {
                return false;
            }

            return
                (
                    Symbol == input.Symbol ||
                    (Symbol is not null &&
                    Symbol.Equals(input.Symbol))
                ) &&
                (
                    BidPrice == input.BidPrice ||
                    (BidPrice is not null &&
                    BidPrice.Equals(input.BidPrice))
                ) &&
                (
                    AskPrice == input.AskPrice ||
                    (AskPrice is not null &&
                    AskPrice.Equals(input.AskPrice))
                ) &&
                (
                    LastPrice == input.LastPrice ||
                    (LastPrice is not null &&
                    LastPrice.Equals(input.LastPrice))
                ) &&
                (
                    LastTickDirection == input.LastTickDirection ||
                    (LastTickDirection is not null &&
                    LastTickDirection.Equals(input.LastTickDirection))
                ) &&
                (
                    PrevPrice24h == input.PrevPrice24h ||
                    (PrevPrice24h is not null &&
                    PrevPrice24h.Equals(input.PrevPrice24h))
                ) &&
                (
                    Price24hPcnt == input.Price24hPcnt ||
                    (Price24hPcnt is not null &&
                    Price24hPcnt.Equals(input.Price24hPcnt))
                ) &&
                (
                    HighPrice24h == input.HighPrice24h ||
                    (HighPrice24h is not null &&
                    HighPrice24h.Equals(input.HighPrice24h))
                ) &&
                (
                    LowPrice24h == input.LowPrice24h ||
                    (LowPrice24h is not null &&
                    LowPrice24h.Equals(input.LowPrice24h))
                ) &&
                (
                    PrevPrice1h == input.PrevPrice1h ||
                    (PrevPrice1h is not null &&
                    PrevPrice1h.Equals(input.PrevPrice1h))
                ) &&
                (
                    Price1hPcnt == input.Price1hPcnt ||
                    (Price1hPcnt is not null &&
                    Price1hPcnt.Equals(input.Price1hPcnt))
                ) &&
                (
                    MarkPrice == input.MarkPrice ||
                    (MarkPrice is not null &&
                    MarkPrice.Equals(input.MarkPrice))
                ) &&
                (
                    IndexPrice == input.IndexPrice ||
                    (IndexPrice is not null &&
                    IndexPrice.Equals(input.IndexPrice))
                ) &&
                (
                    OpenInterest == input.OpenInterest ||
                    (OpenInterest is not null &&
                    OpenInterest.Equals(input.OpenInterest))
                ) &&
                (
                    OpenValue == input.OpenValue ||
                    (OpenValue is not null &&
                    OpenValue.Equals(input.OpenValue))
                ) &&
                (
                    TotalTurnover == input.TotalTurnover ||
                    (TotalTurnover is not null &&
                    TotalTurnover.Equals(input.TotalTurnover))
                ) &&
                (
                    Turnover24h == input.Turnover24h ||
                    (Turnover24h is not null &&
                    Turnover24h.Equals(input.Turnover24h))
                ) &&
                (
                    TotalVolume == input.TotalVolume ||
                    (TotalVolume is not null &&
                    TotalVolume.Equals(input.TotalVolume))
                ) &&
                (
                    Volume24h == input.Volume24h ||
                    (Volume24h is not null &&
                    Volume24h.Equals(input.Volume24h))
                ) &&
                (
                    FundingRate == input.FundingRate ||
                    (FundingRate is not null &&
                    FundingRate.Equals(input.FundingRate))
                ) &&
                (
                    PredictedFundingRate == input.PredictedFundingRate ||
                    (PredictedFundingRate is not null &&
                    PredictedFundingRate.Equals(input.PredictedFundingRate))
                ) &&
                (
                    NextFundingTime == input.NextFundingTime ||
                    (NextFundingTime is not null &&
                    NextFundingTime.Equals(input.NextFundingTime))
                ) &&
                (
                    CountdownHour == input.CountdownHour ||
                    (CountdownHour is not null &&
                    CountdownHour.Equals(input.CountdownHour))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Symbol is not null)
                {
                    hashCode = hashCode * 59 + Symbol.GetHashCode();
                }

                if (BidPrice is not null)
                {
                    hashCode = hashCode * 59 + BidPrice.GetHashCode();
                }

                if (AskPrice is not null)
                {
                    hashCode = hashCode * 59 + AskPrice.GetHashCode();
                }

                if (LastPrice is not null)
                {
                    hashCode = hashCode * 59 + LastPrice.GetHashCode();
                }

                if (LastTickDirection is not null)
                {
                    hashCode = hashCode * 59 + LastTickDirection.GetHashCode();
                }

                if (PrevPrice24h is not null)
                {
                    hashCode = hashCode * 59 + PrevPrice24h.GetHashCode();
                }

                if (Price24hPcnt is not null)
                {
                    hashCode = hashCode * 59 + Price24hPcnt.GetHashCode();
                }

                if (HighPrice24h is not null)
                {
                    hashCode = hashCode * 59 + HighPrice24h.GetHashCode();
                }

                if (LowPrice24h is not null)
                {
                    hashCode = hashCode * 59 + LowPrice24h.GetHashCode();
                }

                if (PrevPrice1h is not null)
                {
                    hashCode = hashCode * 59 + PrevPrice1h.GetHashCode();
                }

                if (Price1hPcnt is not null)
                {
                    hashCode = hashCode * 59 + Price1hPcnt.GetHashCode();
                }

                if (MarkPrice is not null)
                {
                    hashCode = hashCode * 59 + MarkPrice.GetHashCode();
                }

                if (IndexPrice is not null)
                {
                    hashCode = hashCode * 59 + IndexPrice.GetHashCode();
                }

                if (OpenInterest is not null)
                {
                    hashCode = hashCode * 59 + OpenInterest.GetHashCode();
                }

                if (OpenValue is not null)
                {
                    hashCode = hashCode * 59 + OpenValue.GetHashCode();
                }

                if (TotalTurnover is not null)
                {
                    hashCode = hashCode * 59 + TotalTurnover.GetHashCode();
                }

                if (Turnover24h is not null)
                {
                    hashCode = hashCode * 59 + Turnover24h.GetHashCode();
                }

                if (TotalVolume is not null)
                {
                    hashCode = hashCode * 59 + TotalVolume.GetHashCode();
                }

                if (Volume24h is not null)
                {
                    hashCode = hashCode * 59 + Volume24h.GetHashCode();
                }

                if (FundingRate is not null)
                {
                    hashCode = hashCode * 59 + FundingRate.GetHashCode();
                }

                if (PredictedFundingRate is not null)
                {
                    hashCode = hashCode * 59 + PredictedFundingRate.GetHashCode();
                }

                if (NextFundingTime is not null)
                {
                    hashCode = hashCode * 59 + NextFundingTime.GetHashCode();
                }

                if (CountdownHour is not null)
                {
                    hashCode = hashCode * 59 + CountdownHour.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
