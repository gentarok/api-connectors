/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// Get the trade records of a order response
    /// </summary>
    [DataContract]
    public partial class TradeRecordsInfo : IEquatable<TradeRecordsInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeRecordsInfo" /> class.
        /// </summary>
        /// <param name="closedSize">closedSize.</param>
        /// <param name="crossSeq">crossSeq.</param>
        /// <param name="execFee">execFee.</param>
        /// <param name="execId">execId.</param>
        /// <param name="execPrice">execPrice.</param>
        /// <param name="execQty">execQty.</param>
        /// <param name="execTime">execTime.</param>
        /// <param name="execType">execType.</param>
        /// <param name="execValue">execValue.</param>
        /// <param name="feeRate">feeRate.</param>
        /// <param name="lastLiquidityInd">lastLiquidityInd.</param>
        /// <param name="leavesQty">leavesQty.</param>
        /// <param name="nthFill">nthFill.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="orderPrice">orderPrice.</param>
        /// <param name="orderQty">orderQty.</param>
        /// <param name="orderType">orderType.</param>
        /// <param name="side">side.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="userId">userId.</param>
        public TradeRecordsInfo(decimal? closedSize = default, decimal? crossSeq = default, string execFee = default, string execId = default, string execPrice = default, decimal? execQty = default, string execTime = default, string execType = default, string execValue = default, string feeRate = default, string lastLiquidityInd = default, decimal? leavesQty = default, decimal? nthFill = default, string orderId = default, string orderPrice = default, decimal? orderQty = default, string orderType = default, string side = default, string symbol = default, decimal? userId = default)
        {
            ClosedSize = closedSize;
            CrossSeq = crossSeq;
            ExecFee = execFee;
            ExecId = execId;
            ExecPrice = execPrice;
            ExecQty = execQty;
            ExecTime = execTime;
            ExecType = execType;
            ExecValue = execValue;
            FeeRate = feeRate;
            LastLiquidityInd = lastLiquidityInd;
            LeavesQty = leavesQty;
            NthFill = nthFill;
            OrderId = orderId;
            OrderPrice = orderPrice;
            OrderQty = orderQty;
            OrderType = orderType;
            Side = side;
            Symbol = symbol;
            UserId = userId;
        }

        /// <summary>
        /// Gets or Sets ClosedSize
        /// </summary>
        [DataMember(Name = "closed_size", EmitDefaultValue = false)]
        public decimal? ClosedSize { get; set; }

        /// <summary>
        /// Gets or Sets CrossSeq
        /// </summary>
        [DataMember(Name = "cross_seq", EmitDefaultValue = false)]
        public decimal? CrossSeq { get; set; }

        /// <summary>
        /// Gets or Sets ExecFee
        /// </summary>
        [DataMember(Name = "exec_fee", EmitDefaultValue = false)]
        public string ExecFee { get; set; }

        /// <summary>
        /// Gets or Sets ExecId
        /// </summary>
        [DataMember(Name = "exec_id", EmitDefaultValue = false)]
        public string ExecId { get; set; }

        /// <summary>
        /// Gets or Sets ExecPrice
        /// </summary>
        [DataMember(Name = "exec_price", EmitDefaultValue = false)]
        public string ExecPrice { get; set; }

        /// <summary>
        /// Gets or Sets ExecQty
        /// </summary>
        [DataMember(Name = "exec_qty", EmitDefaultValue = false)]
        public decimal? ExecQty { get; set; }

        /// <summary>
        /// Gets or Sets ExecTime
        /// </summary>
        [DataMember(Name = "exec_time", EmitDefaultValue = false)]
        public string ExecTime { get; set; }

        /// <summary>
        /// Gets or Sets ExecType
        /// </summary>
        [DataMember(Name = "exec_type", EmitDefaultValue = false)]
        public string ExecType { get; set; }

        /// <summary>
        /// Gets or Sets ExecValue
        /// </summary>
        [DataMember(Name = "exec_value", EmitDefaultValue = false)]
        public string ExecValue { get; set; }

        /// <summary>
        /// Gets or Sets FeeRate
        /// </summary>
        [DataMember(Name = "fee_rate", EmitDefaultValue = false)]
        public string FeeRate { get; set; }

        /// <summary>
        /// Gets or Sets LastLiquidityInd
        /// </summary>
        [DataMember(Name = "last_liquidity_ind", EmitDefaultValue = false)]
        public string LastLiquidityInd { get; set; }

        /// <summary>
        /// Gets or Sets LeavesQty
        /// </summary>
        [DataMember(Name = "leaves_qty", EmitDefaultValue = false)]
        public decimal? LeavesQty { get; set; }

        /// <summary>
        /// Gets or Sets NthFill
        /// </summary>
        [DataMember(Name = "nth_fill", EmitDefaultValue = false)]
        public decimal? NthFill { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "order_id", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets OrderPrice
        /// </summary>
        [DataMember(Name = "order_price", EmitDefaultValue = false)]
        public string OrderPrice { get; set; }

        /// <summary>
        /// Gets or Sets OrderQty
        /// </summary>
        [DataMember(Name = "order_qty", EmitDefaultValue = false)]
        public decimal? OrderQty { get; set; }

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [DataMember(Name = "order_type", EmitDefaultValue = false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name = "side", EmitDefaultValue = false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public decimal? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TradeRecordsInfo {\n");
            sb.Append("  ClosedSize: ").Append(ClosedSize).Append("\n");
            sb.Append("  CrossSeq: ").Append(CrossSeq).Append("\n");
            sb.Append("  ExecFee: ").Append(ExecFee).Append("\n");
            sb.Append("  ExecId: ").Append(ExecId).Append("\n");
            sb.Append("  ExecPrice: ").Append(ExecPrice).Append("\n");
            sb.Append("  ExecQty: ").Append(ExecQty).Append("\n");
            sb.Append("  ExecTime: ").Append(ExecTime).Append("\n");
            sb.Append("  ExecType: ").Append(ExecType).Append("\n");
            sb.Append("  ExecValue: ").Append(ExecValue).Append("\n");
            sb.Append("  FeeRate: ").Append(FeeRate).Append("\n");
            sb.Append("  LastLiquidityInd: ").Append(LastLiquidityInd).Append("\n");
            sb.Append("  LeavesQty: ").Append(LeavesQty).Append("\n");
            sb.Append("  NthFill: ").Append(NthFill).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderPrice: ").Append(OrderPrice).Append("\n");
            sb.Append("  OrderQty: ").Append(OrderQty).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TradeRecordsInfo);
        }

        /// <summary>
        /// Returns true if TradeRecordsInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of TradeRecordsInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradeRecordsInfo input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    ClosedSize == input.ClosedSize ||
                    (ClosedSize != null &&
                    ClosedSize.Equals(input.ClosedSize))
                ) &&
                (
                    CrossSeq == input.CrossSeq ||
                    (CrossSeq != null &&
                    CrossSeq.Equals(input.CrossSeq))
                ) &&
                (
                    ExecFee == input.ExecFee ||
                    (ExecFee != null &&
                    ExecFee.Equals(input.ExecFee))
                ) &&
                (
                    ExecId == input.ExecId ||
                    (ExecId != null &&
                    ExecId.Equals(input.ExecId))
                ) &&
                (
                    ExecPrice == input.ExecPrice ||
                    (ExecPrice != null &&
                    ExecPrice.Equals(input.ExecPrice))
                ) &&
                (
                    ExecQty == input.ExecQty ||
                    (ExecQty != null &&
                    ExecQty.Equals(input.ExecQty))
                ) &&
                (
                    ExecTime == input.ExecTime ||
                    (ExecTime != null &&
                    ExecTime.Equals(input.ExecTime))
                ) &&
                (
                    ExecType == input.ExecType ||
                    (ExecType != null &&
                    ExecType.Equals(input.ExecType))
                ) &&
                (
                    ExecValue == input.ExecValue ||
                    (ExecValue != null &&
                    ExecValue.Equals(input.ExecValue))
                ) &&
                (
                    FeeRate == input.FeeRate ||
                    (FeeRate != null &&
                    FeeRate.Equals(input.FeeRate))
                ) &&
                (
                    LastLiquidityInd == input.LastLiquidityInd ||
                    (LastLiquidityInd != null &&
                    LastLiquidityInd.Equals(input.LastLiquidityInd))
                ) &&
                (
                    LeavesQty == input.LeavesQty ||
                    (LeavesQty != null &&
                    LeavesQty.Equals(input.LeavesQty))
                ) &&
                (
                    NthFill == input.NthFill ||
                    (NthFill != null &&
                    NthFill.Equals(input.NthFill))
                ) &&
                (
                    OrderId == input.OrderId ||
                    (OrderId != null &&
                    OrderId.Equals(input.OrderId))
                ) &&
                (
                    OrderPrice == input.OrderPrice ||
                    (OrderPrice != null &&
                    OrderPrice.Equals(input.OrderPrice))
                ) &&
                (
                    OrderQty == input.OrderQty ||
                    (OrderQty != null &&
                    OrderQty.Equals(input.OrderQty))
                ) &&
                (
                    OrderType == input.OrderType ||
                    (OrderType != null &&
                    OrderType.Equals(input.OrderType))
                ) &&
                (
                    Side == input.Side ||
                    (Side != null &&
                    Side.Equals(input.Side))
                ) &&
                (
                    Symbol == input.Symbol ||
                    (Symbol != null &&
                    Symbol.Equals(input.Symbol))
                ) &&
                (
                    UserId == input.UserId ||
                    (UserId != null &&
                    UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (ClosedSize != null)
                {
                    hashCode = hashCode * 59 + ClosedSize.GetHashCode();
                }

                if (CrossSeq != null)
                {
                    hashCode = hashCode * 59 + CrossSeq.GetHashCode();
                }

                if (ExecFee != null)
                {
                    hashCode = hashCode * 59 + ExecFee.GetHashCode();
                }

                if (ExecId != null)
                {
                    hashCode = hashCode * 59 + ExecId.GetHashCode();
                }

                if (ExecPrice != null)
                {
                    hashCode = hashCode * 59 + ExecPrice.GetHashCode();
                }

                if (ExecQty != null)
                {
                    hashCode = hashCode * 59 + ExecQty.GetHashCode();
                }

                if (ExecTime != null)
                {
                    hashCode = hashCode * 59 + ExecTime.GetHashCode();
                }

                if (ExecType != null)
                {
                    hashCode = hashCode * 59 + ExecType.GetHashCode();
                }

                if (ExecValue != null)
                {
                    hashCode = hashCode * 59 + ExecValue.GetHashCode();
                }

                if (FeeRate != null)
                {
                    hashCode = hashCode * 59 + FeeRate.GetHashCode();
                }

                if (LastLiquidityInd != null)
                {
                    hashCode = hashCode * 59 + LastLiquidityInd.GetHashCode();
                }

                if (LeavesQty != null)
                {
                    hashCode = hashCode * 59 + LeavesQty.GetHashCode();
                }

                if (NthFill != null)
                {
                    hashCode = hashCode * 59 + NthFill.GetHashCode();
                }

                if (OrderId != null)
                {
                    hashCode = hashCode * 59 + OrderId.GetHashCode();
                }

                if (OrderPrice != null)
                {
                    hashCode = hashCode * 59 + OrderPrice.GetHashCode();
                }

                if (OrderQty != null)
                {
                    hashCode = hashCode * 59 + OrderQty.GetHashCode();
                }

                if (OrderType != null)
                {
                    hashCode = hashCode * 59 + OrderType.GetHashCode();
                }

                if (Side != null)
                {
                    hashCode = hashCode * 59 + Side.GetHashCode();
                }

                if (Symbol != null)
                {
                    hashCode = hashCode * 59 + Symbol.GetHashCode();
                }

                if (UserId != null)
                {
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
