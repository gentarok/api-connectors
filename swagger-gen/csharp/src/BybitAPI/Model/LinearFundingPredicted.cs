/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// LinearFundingPredicted
    /// </summary>
    [DataContract]
    public partial class LinearFundingPredicted : IEquatable<LinearFundingPredicted>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinearFundingPredicted" /> class.
        /// </summary>
        /// <param name="predictedFundingRate">predictedFundingRate.</param>
        /// <param name="predictedFundingFee">predictedFundingFee.</param>
        public LinearFundingPredicted(double? predictedFundingRate = default, double? predictedFundingFee = default)
        {
            PredictedFundingRate = predictedFundingRate;
            PredictedFundingFee = predictedFundingFee;
        }

        /// <summary>
        /// Gets or Sets PredictedFundingRate
        /// </summary>
        [DataMember(Name = "predicted_funding_rate", EmitDefaultValue = false)]
        public double? PredictedFundingRate { get; set; }

        /// <summary>
        /// Gets or Sets PredictedFundingFee
        /// </summary>
        [DataMember(Name = "predicted_funding_fee", EmitDefaultValue = false)]
        public double? PredictedFundingFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinearFundingPredicted {\n");
            sb.Append("  PredictedFundingRate: ").Append(PredictedFundingRate).Append("\n");
            sb.Append("  PredictedFundingFee: ").Append(PredictedFundingFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as LinearFundingPredicted);
        }

        /// <summary>
        /// Returns true if LinearFundingPredicted instances are equal
        /// </summary>
        /// <param name="input">Instance of LinearFundingPredicted to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinearFundingPredicted input)
        {
            if (input is null)
            {
                return false;
            }

            return
                (
                    PredictedFundingRate == input.PredictedFundingRate ||
                    (PredictedFundingRate is not null &&
                    PredictedFundingRate.Equals(input.PredictedFundingRate))
                ) &&
                (
                    PredictedFundingFee == input.PredictedFundingFee ||
                    (PredictedFundingFee is not null &&
                    PredictedFundingFee.Equals(input.PredictedFundingFee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (PredictedFundingRate is not null)
                {
                    hashCode = hashCode * 59 + PredictedFundingRate.GetHashCode();
                }

                if (PredictedFundingFee is not null)
                {
                    hashCode = hashCode * 59 + PredictedFundingFee.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
