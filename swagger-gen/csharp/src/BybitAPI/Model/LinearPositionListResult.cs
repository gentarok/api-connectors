/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// LinearPositionListResult
    /// </summary>
    [DataContract]
    public partial class LinearPositionListResult : IEquatable<LinearPositionListResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinearPositionListResult" /> class.
        /// </summary>
        /// <param name="bustPrice">bustPrice.</param>
        /// <param name="cumRealisedPnl">cumRealisedPnl.</param>
        /// <param name="entryPrice">entryPrice.</param>
        /// <param name="freeQty">freeQty.</param>
        /// <param name="leverage">leverage.</param>
        /// <param name="liqPrice">liqPrice.</param>
        /// <param name="occClosingFee">occClosingFee.</param>
        /// <param name="positionMargin">positionMargin.</param>
        /// <param name="positionValue">positionValue.</param>
        /// <param name="realisedPnl">realisedPnl.</param>
        /// <param name="side">side.</param>
        /// <param name="size">size.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="userId">userId.</param>
        /// <param name="tpSlMode">tpSlMode.</param>
        public LinearPositionListResult(double? bustPrice = default, double? cumRealisedPnl = default, double? entryPrice = default, double? freeQty = default, double? leverage = default, double? liqPrice = default, double? occClosingFee = default, double? positionMargin = default, double? positionValue = default, double? realisedPnl = default, string side = default, double? size = default, string symbol = default, long? userId = default, string tpSlMode = default)
        {
            BustPrice = bustPrice;
            CumRealisedPnl = cumRealisedPnl;
            EntryPrice = entryPrice;
            FreeQty = freeQty;
            Leverage = leverage;
            LiqPrice = liqPrice;
            OccClosingFee = occClosingFee;
            PositionMargin = positionMargin;
            PositionValue = positionValue;
            RealisedPnl = realisedPnl;
            Side = side;
            Size = size;
            Symbol = symbol;
            UserId = userId;
            TpSlMode = tpSlMode;
        }

        /// <summary>
        /// Gets or Sets BustPrice
        /// </summary>
        [DataMember(Name = "bust_price", EmitDefaultValue = false)]
        public double? BustPrice { get; set; }

        /// <summary>
        /// Gets or Sets CumRealisedPnl
        /// </summary>
        [DataMember(Name = "cum_realised_pnl", EmitDefaultValue = false)]
        public double? CumRealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets EntryPrice
        /// </summary>
        [DataMember(Name = "entry_price", EmitDefaultValue = false)]
        public double? EntryPrice { get; set; }

        /// <summary>
        /// Gets or Sets FreeQty
        /// </summary>
        [DataMember(Name = "free_qty", EmitDefaultValue = false)]
        public double? FreeQty { get; set; }

        /// <summary>
        /// Gets or Sets Leverage
        /// </summary>
        [DataMember(Name = "leverage", EmitDefaultValue = false)]
        public double? Leverage { get; set; }

        /// <summary>
        /// Gets or Sets LiqPrice
        /// </summary>
        [DataMember(Name = "liq_price", EmitDefaultValue = false)]
        public double? LiqPrice { get; set; }

        /// <summary>
        /// Gets or Sets OccClosingFee
        /// </summary>
        [DataMember(Name = "occ_closing_fee", EmitDefaultValue = false)]
        public double? OccClosingFee { get; set; }

        /// <summary>
        /// Gets or Sets PositionMargin
        /// </summary>
        [DataMember(Name = "position_margin", EmitDefaultValue = false)]
        public double? PositionMargin { get; set; }

        /// <summary>
        /// Gets or Sets PositionValue
        /// </summary>
        [DataMember(Name = "position_value", EmitDefaultValue = false)]
        public double? PositionValue { get; set; }

        /// <summary>
        /// Gets or Sets RealisedPnl
        /// </summary>
        [DataMember(Name = "realised_pnl", EmitDefaultValue = false)]
        public double? RealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name = "side", EmitDefaultValue = false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public double? Size { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets TpSlMode
        /// </summary>
        [DataMember(Name = "tp_sl_mode", EmitDefaultValue = false)]
        public string TpSlMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinearPositionListResult {\n");
            sb.Append("  BustPrice: ").Append(BustPrice).Append("\n");
            sb.Append("  CumRealisedPnl: ").Append(CumRealisedPnl).Append("\n");
            sb.Append("  EntryPrice: ").Append(EntryPrice).Append("\n");
            sb.Append("  FreeQty: ").Append(FreeQty).Append("\n");
            sb.Append("  Leverage: ").Append(Leverage).Append("\n");
            sb.Append("  LiqPrice: ").Append(LiqPrice).Append("\n");
            sb.Append("  OccClosingFee: ").Append(OccClosingFee).Append("\n");
            sb.Append("  PositionMargin: ").Append(PositionMargin).Append("\n");
            sb.Append("  PositionValue: ").Append(PositionValue).Append("\n");
            sb.Append("  RealisedPnl: ").Append(RealisedPnl).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  TpSlMode: ").Append(TpSlMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as LinearPositionListResult);
        }

        /// <summary>
        /// Returns true if LinearPositionListResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LinearPositionListResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinearPositionListResult input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    BustPrice == input.BustPrice ||
                    (BustPrice != null &&
                    BustPrice.Equals(input.BustPrice))
                ) &&
                (
                    CumRealisedPnl == input.CumRealisedPnl ||
                    (CumRealisedPnl != null &&
                    CumRealisedPnl.Equals(input.CumRealisedPnl))
                ) &&
                (
                    EntryPrice == input.EntryPrice ||
                    (EntryPrice != null &&
                    EntryPrice.Equals(input.EntryPrice))
                ) &&
                (
                    FreeQty == input.FreeQty ||
                    (FreeQty != null &&
                    FreeQty.Equals(input.FreeQty))
                ) &&
                (
                    Leverage == input.Leverage ||
                    (Leverage != null &&
                    Leverage.Equals(input.Leverage))
                ) &&
                (
                    LiqPrice == input.LiqPrice ||
                    (LiqPrice != null &&
                    LiqPrice.Equals(input.LiqPrice))
                ) &&
                (
                    OccClosingFee == input.OccClosingFee ||
                    (OccClosingFee != null &&
                    OccClosingFee.Equals(input.OccClosingFee))
                ) &&
                (
                    PositionMargin == input.PositionMargin ||
                    (PositionMargin != null &&
                    PositionMargin.Equals(input.PositionMargin))
                ) &&
                (
                    PositionValue == input.PositionValue ||
                    (PositionValue != null &&
                    PositionValue.Equals(input.PositionValue))
                ) &&
                (
                    RealisedPnl == input.RealisedPnl ||
                    (RealisedPnl != null &&
                    RealisedPnl.Equals(input.RealisedPnl))
                ) &&
                (
                    Side == input.Side ||
                    (Side != null &&
                    Side.Equals(input.Side))
                ) &&
                (
                    Size == input.Size ||
                    (Size != null &&
                    Size.Equals(input.Size))
                ) &&
                (
                    Symbol == input.Symbol ||
                    (Symbol != null &&
                    Symbol.Equals(input.Symbol))
                ) &&
                (
                    UserId == input.UserId ||
                    (UserId != null &&
                    UserId.Equals(input.UserId))
                ) &&
                (
                    TpSlMode == input.TpSlMode ||
                    (TpSlMode != null &&
                    TpSlMode.Equals(input.TpSlMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (BustPrice != null)
                {
                    hashCode = hashCode * 59 + BustPrice.GetHashCode();
                }

                if (CumRealisedPnl != null)
                {
                    hashCode = hashCode * 59 + CumRealisedPnl.GetHashCode();
                }

                if (EntryPrice != null)
                {
                    hashCode = hashCode * 59 + EntryPrice.GetHashCode();
                }

                if (FreeQty != null)
                {
                    hashCode = hashCode * 59 + FreeQty.GetHashCode();
                }

                if (Leverage != null)
                {
                    hashCode = hashCode * 59 + Leverage.GetHashCode();
                }

                if (LiqPrice != null)
                {
                    hashCode = hashCode * 59 + LiqPrice.GetHashCode();
                }

                if (OccClosingFee != null)
                {
                    hashCode = hashCode * 59 + OccClosingFee.GetHashCode();
                }

                if (PositionMargin != null)
                {
                    hashCode = hashCode * 59 + PositionMargin.GetHashCode();
                }

                if (PositionValue != null)
                {
                    hashCode = hashCode * 59 + PositionValue.GetHashCode();
                }

                if (RealisedPnl != null)
                {
                    hashCode = hashCode * 59 + RealisedPnl.GetHashCode();
                }

                if (Side != null)
                {
                    hashCode = hashCode * 59 + Side.GetHashCode();
                }

                if (Size != null)
                {
                    hashCode = hashCode * 59 + Size.GetHashCode();
                }

                if (Symbol != null)
                {
                    hashCode = hashCode * 59 + Symbol.GetHashCode();
                }

                if (UserId != null)
                {
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                }

                if (TpSlMode != null)
                {
                    hashCode = hashCode * 59 + TpSlMode.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
