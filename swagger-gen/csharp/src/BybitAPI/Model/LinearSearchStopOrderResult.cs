/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// LinearSearchStopOrderResult
    /// </summary>
    [DataContract]
    public partial class LinearSearchStopOrderResult : IEquatable<LinearSearchStopOrderResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinearSearchStopOrderResult" /> class.
        /// </summary>
        /// <param name="stopOrderId">stopOrderId.</param>
        /// <param name="userId">userId.</param>
        /// <param name="side">side.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="orderType">orderType.</param>
        /// <param name="price">price.</param>
        /// <param name="qty">qty.</param>
        /// <param name="timeInForce">timeInForce.</param>
        /// <param name="orderStatus">orderStatus.</param>
        /// <param name="triggerPrice">triggerPrice.</param>
        /// <param name="orderLinkId">orderLinkId.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="takeProfit">takeProfit.</param>
        /// <param name="stopLoss">stopLoss.</param>
        /// <param name="tpTriggerBy">tpTriggerBy.</param>
        /// <param name="slTriggerBy">slTriggerBy.</param>
        public LinearSearchStopOrderResult(string stopOrderId = default, long? userId = default, string side = default, string symbol = default, string orderType = default, double? price = default, double? qty = default, string timeInForce = default, string orderStatus = default, double? triggerPrice = default, string orderLinkId = default, string createdAt = default, string updatedAt = default, double? takeProfit = default, double? stopLoss = default, string tpTriggerBy = default, string slTriggerBy = default)
        {
            StopOrderId = stopOrderId;
            UserId = userId;
            Side = side;
            Symbol = symbol;
            OrderType = orderType;
            Price = price;
            Qty = qty;
            TimeInForce = timeInForce;
            OrderStatus = orderStatus;
            TriggerPrice = triggerPrice;
            OrderLinkId = orderLinkId;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            TakeProfit = takeProfit;
            StopLoss = stopLoss;
            TpTriggerBy = tpTriggerBy;
            SlTriggerBy = slTriggerBy;
        }

        /// <summary>
        /// Gets or Sets StopOrderId
        /// </summary>
        [DataMember(Name = "stop_order_id", EmitDefaultValue = false)]
        public string StopOrderId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name = "side", EmitDefaultValue = false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [DataMember(Name = "order_type", EmitDefaultValue = false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", EmitDefaultValue = false)]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name = "qty", EmitDefaultValue = false)]
        public double? Qty { get; set; }

        /// <summary>
        /// Gets or Sets TimeInForce
        /// </summary>
        [DataMember(Name = "time_in_force", EmitDefaultValue = false)]
        public string TimeInForce { get; set; }

        /// <summary>
        /// Gets or Sets OrderStatus
        /// </summary>
        [DataMember(Name = "order_status", EmitDefaultValue = false)]
        public string OrderStatus { get; set; }

        /// <summary>
        /// Gets or Sets TriggerPrice
        /// </summary>
        [DataMember(Name = "trigger_price", EmitDefaultValue = false)]
        public double? TriggerPrice { get; set; }

        /// <summary>
        /// Gets or Sets OrderLinkId
        /// </summary>
        [DataMember(Name = "order_link_id", EmitDefaultValue = false)]
        public string OrderLinkId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets TakeProfit
        /// </summary>
        [DataMember(Name = "take_profit", EmitDefaultValue = false)]
        public double? TakeProfit { get; set; }

        /// <summary>
        /// Gets or Sets StopLoss
        /// </summary>
        [DataMember(Name = "stop_loss", EmitDefaultValue = false)]
        public double? StopLoss { get; set; }

        /// <summary>
        /// Gets or Sets TpTriggerBy
        /// </summary>
        [DataMember(Name = "tp_trigger_by", EmitDefaultValue = false)]
        public string TpTriggerBy { get; set; }

        /// <summary>
        /// Gets or Sets SlTriggerBy
        /// </summary>
        [DataMember(Name = "sl_trigger_by", EmitDefaultValue = false)]
        public string SlTriggerBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinearSearchStopOrderResult {\n");
            sb.Append("  StopOrderId: ").Append(StopOrderId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  OrderStatus: ").Append(OrderStatus).Append("\n");
            sb.Append("  TriggerPrice: ").Append(TriggerPrice).Append("\n");
            sb.Append("  OrderLinkId: ").Append(OrderLinkId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  TakeProfit: ").Append(TakeProfit).Append("\n");
            sb.Append("  StopLoss: ").Append(StopLoss).Append("\n");
            sb.Append("  TpTriggerBy: ").Append(TpTriggerBy).Append("\n");
            sb.Append("  SlTriggerBy: ").Append(SlTriggerBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as LinearSearchStopOrderResult);
        }

        /// <summary>
        /// Returns true if LinearSearchStopOrderResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LinearSearchStopOrderResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinearSearchStopOrderResult input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    StopOrderId == input.StopOrderId ||
                    (StopOrderId != null &&
                    StopOrderId.Equals(input.StopOrderId))
                ) &&
                (
                    UserId == input.UserId ||
                    (UserId != null &&
                    UserId.Equals(input.UserId))
                ) &&
                (
                    Side == input.Side ||
                    (Side != null &&
                    Side.Equals(input.Side))
                ) &&
                (
                    Symbol == input.Symbol ||
                    (Symbol != null &&
                    Symbol.Equals(input.Symbol))
                ) &&
                (
                    OrderType == input.OrderType ||
                    (OrderType != null &&
                    OrderType.Equals(input.OrderType))
                ) &&
                (
                    Price == input.Price ||
                    (Price != null &&
                    Price.Equals(input.Price))
                ) &&
                (
                    Qty == input.Qty ||
                    (Qty != null &&
                    Qty.Equals(input.Qty))
                ) &&
                (
                    TimeInForce == input.TimeInForce ||
                    (TimeInForce != null &&
                    TimeInForce.Equals(input.TimeInForce))
                ) &&
                (
                    OrderStatus == input.OrderStatus ||
                    (OrderStatus != null &&
                    OrderStatus.Equals(input.OrderStatus))
                ) &&
                (
                    TriggerPrice == input.TriggerPrice ||
                    (TriggerPrice != null &&
                    TriggerPrice.Equals(input.TriggerPrice))
                ) &&
                (
                    OrderLinkId == input.OrderLinkId ||
                    (OrderLinkId != null &&
                    OrderLinkId.Equals(input.OrderLinkId))
                ) &&
                (
                    CreatedAt == input.CreatedAt ||
                    (CreatedAt != null &&
                    CreatedAt.Equals(input.CreatedAt))
                ) &&
                (
                    UpdatedAt == input.UpdatedAt ||
                    (UpdatedAt != null &&
                    UpdatedAt.Equals(input.UpdatedAt))
                ) &&
                (
                    TakeProfit == input.TakeProfit ||
                    (TakeProfit != null &&
                    TakeProfit.Equals(input.TakeProfit))
                ) &&
                (
                    StopLoss == input.StopLoss ||
                    (StopLoss != null &&
                    StopLoss.Equals(input.StopLoss))
                ) &&
                (
                    TpTriggerBy == input.TpTriggerBy ||
                    (TpTriggerBy != null &&
                    TpTriggerBy.Equals(input.TpTriggerBy))
                ) &&
                (
                    SlTriggerBy == input.SlTriggerBy ||
                    (SlTriggerBy != null &&
                    SlTriggerBy.Equals(input.SlTriggerBy))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (StopOrderId != null)
                {
                    hashCode = hashCode * 59 + StopOrderId.GetHashCode();
                }

                if (UserId != null)
                {
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                }

                if (Side != null)
                {
                    hashCode = hashCode * 59 + Side.GetHashCode();
                }

                if (Symbol != null)
                {
                    hashCode = hashCode * 59 + Symbol.GetHashCode();
                }

                if (OrderType != null)
                {
                    hashCode = hashCode * 59 + OrderType.GetHashCode();
                }

                if (Price != null)
                {
                    hashCode = hashCode * 59 + Price.GetHashCode();
                }

                if (Qty != null)
                {
                    hashCode = hashCode * 59 + Qty.GetHashCode();
                }

                if (TimeInForce != null)
                {
                    hashCode = hashCode * 59 + TimeInForce.GetHashCode();
                }

                if (OrderStatus != null)
                {
                    hashCode = hashCode * 59 + OrderStatus.GetHashCode();
                }

                if (TriggerPrice != null)
                {
                    hashCode = hashCode * 59 + TriggerPrice.GetHashCode();
                }

                if (OrderLinkId != null)
                {
                    hashCode = hashCode * 59 + OrderLinkId.GetHashCode();
                }

                if (CreatedAt != null)
                {
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                }

                if (UpdatedAt != null)
                {
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                }

                if (TakeProfit != null)
                {
                    hashCode = hashCode * 59 + TakeProfit.GetHashCode();
                }

                if (StopLoss != null)
                {
                    hashCode = hashCode * 59 + StopLoss.GetHashCode();
                }

                if (TpTriggerBy != null)
                {
                    hashCode = hashCode * 59 + TpTriggerBy.GetHashCode();
                }

                if (SlTriggerBy != null)
                {
                    hashCode = hashCode * 59 + SlTriggerBy.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}