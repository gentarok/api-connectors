/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// Get the closed-pnl/list response
    /// </summary>
    [DataContract]
    public partial class ClosedPnlInfo : IEquatable<ClosedPnlInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClosedPnlInfo" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userId">userId.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="orderId">orderId.</param>
        /// <param name="side">side.</param>
        /// <param name="qty">qty.</param>
        /// <param name="orderPrice">orderPrice.</param>
        /// <param name="orderType">orderType.</param>
        /// <param name="execType">execType.</param>
        /// <param name="closedSize">closedSize.</param>
        /// <param name="cumEntryValue">cumEntryValue.</param>
        /// <param name="avgEntryPrice">avgEntryPrice.</param>
        /// <param name="cumExitValue">cumExitValue.</param>
        /// <param name="avgExitPrice">avgExitPrice.</param>
        /// <param name="closedPnl">closedPnl.</param>
        /// <param name="fillCount">fillCount.</param>
        /// <param name="leverage">leverage.</param>
        /// <param name="createdAt">createdAt.</param>
        public ClosedPnlInfo(int? id = default, int? userId = default, string symbol = default, string orderId = default, string side = default, int? qty = default, int? orderPrice = default, string orderType = default, string execType = default, int? closedSize = default, decimal? cumEntryValue = default, int? avgEntryPrice = default, decimal? cumExitValue = default, int? avgExitPrice = default, decimal? closedPnl = default, int? fillCount = default, int? leverage = default, int? createdAt = default)
        {
            Id = id;
            UserId = userId;
            Symbol = symbol;
            OrderId = orderId;
            Side = side;
            Qty = qty;
            OrderPrice = orderPrice;
            OrderType = orderType;
            ExecType = execType;
            ClosedSize = closedSize;
            CumEntryValue = cumEntryValue;
            AvgEntryPrice = avgEntryPrice;
            CumExitValue = cumExitValue;
            AvgExitPrice = avgExitPrice;
            ClosedPnl = closedPnl;
            FillCount = fillCount;
            Leverage = leverage;
            CreatedAt = createdAt;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "order_id", EmitDefaultValue = false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [DataMember(Name = "side", EmitDefaultValue = false)]
        public string Side { get; set; }

        /// <summary>
        /// Gets or Sets Qty
        /// </summary>
        [DataMember(Name = "qty", EmitDefaultValue = false)]
        public int? Qty { get; set; }

        /// <summary>
        /// Gets or Sets OrderPrice
        /// </summary>
        [DataMember(Name = "order_price", EmitDefaultValue = false)]
        public int? OrderPrice { get; set; }

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [DataMember(Name = "order_type", EmitDefaultValue = false)]
        public string OrderType { get; set; }

        /// <summary>
        /// Gets or Sets ExecType
        /// </summary>
        [DataMember(Name = "exec_type", EmitDefaultValue = false)]
        public string ExecType { get; set; }

        /// <summary>
        /// Gets or Sets ClosedSize
        /// </summary>
        [DataMember(Name = "closed_size", EmitDefaultValue = false)]
        public int? ClosedSize { get; set; }

        /// <summary>
        /// Gets or Sets CumEntryValue
        /// </summary>
        [DataMember(Name = "cum_entry_value", EmitDefaultValue = false)]
        public decimal? CumEntryValue { get; set; }

        /// <summary>
        /// Gets or Sets AvgEntryPrice
        /// </summary>
        [DataMember(Name = "avg_entry_price", EmitDefaultValue = false)]
        public int? AvgEntryPrice { get; set; }

        /// <summary>
        /// Gets or Sets CumExitValue
        /// </summary>
        [DataMember(Name = "cum_exit_value", EmitDefaultValue = false)]
        public decimal? CumExitValue { get; set; }

        /// <summary>
        /// Gets or Sets AvgExitPrice
        /// </summary>
        [DataMember(Name = "avg_exit_price", EmitDefaultValue = false)]
        public int? AvgExitPrice { get; set; }

        /// <summary>
        /// Gets or Sets ClosedPnl
        /// </summary>
        [DataMember(Name = "closed_pnl", EmitDefaultValue = false)]
        public decimal? ClosedPnl { get; set; }

        /// <summary>
        /// Gets or Sets FillCount
        /// </summary>
        [DataMember(Name = "fill_count", EmitDefaultValue = false)]
        public int? FillCount { get; set; }

        /// <summary>
        /// Gets or Sets Leverage
        /// </summary>
        [DataMember(Name = "leverage", EmitDefaultValue = false)]
        public int? Leverage { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public int? CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClosedPnlInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  Qty: ").Append(Qty).Append("\n");
            sb.Append("  OrderPrice: ").Append(OrderPrice).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  ExecType: ").Append(ExecType).Append("\n");
            sb.Append("  ClosedSize: ").Append(ClosedSize).Append("\n");
            sb.Append("  CumEntryValue: ").Append(CumEntryValue).Append("\n");
            sb.Append("  AvgEntryPrice: ").Append(AvgEntryPrice).Append("\n");
            sb.Append("  CumExitValue: ").Append(CumExitValue).Append("\n");
            sb.Append("  AvgExitPrice: ").Append(AvgExitPrice).Append("\n");
            sb.Append("  ClosedPnl: ").Append(ClosedPnl).Append("\n");
            sb.Append("  FillCount: ").Append(FillCount).Append("\n");
            sb.Append("  Leverage: ").Append(Leverage).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as ClosedPnlInfo);
        }

        /// <summary>
        /// Returns true if ClosedPnlInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ClosedPnlInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClosedPnlInfo input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) &&
                (
                    UserId == input.UserId ||
                    (UserId != null &&
                    UserId.Equals(input.UserId))
                ) &&
                (
                    Symbol == input.Symbol ||
                    (Symbol != null &&
                    Symbol.Equals(input.Symbol))
                ) &&
                (
                    OrderId == input.OrderId ||
                    (OrderId != null &&
                    OrderId.Equals(input.OrderId))
                ) &&
                (
                    Side == input.Side ||
                    (Side != null &&
                    Side.Equals(input.Side))
                ) &&
                (
                    Qty == input.Qty ||
                    (Qty != null &&
                    Qty.Equals(input.Qty))
                ) &&
                (
                    OrderPrice == input.OrderPrice ||
                    (OrderPrice != null &&
                    OrderPrice.Equals(input.OrderPrice))
                ) &&
                (
                    OrderType == input.OrderType ||
                    (OrderType != null &&
                    OrderType.Equals(input.OrderType))
                ) &&
                (
                    ExecType == input.ExecType ||
                    (ExecType != null &&
                    ExecType.Equals(input.ExecType))
                ) &&
                (
                    ClosedSize == input.ClosedSize ||
                    (ClosedSize != null &&
                    ClosedSize.Equals(input.ClosedSize))
                ) &&
                (
                    CumEntryValue == input.CumEntryValue ||
                    (CumEntryValue != null &&
                    CumEntryValue.Equals(input.CumEntryValue))
                ) &&
                (
                    AvgEntryPrice == input.AvgEntryPrice ||
                    (AvgEntryPrice != null &&
                    AvgEntryPrice.Equals(input.AvgEntryPrice))
                ) &&
                (
                    CumExitValue == input.CumExitValue ||
                    (CumExitValue != null &&
                    CumExitValue.Equals(input.CumExitValue))
                ) &&
                (
                    AvgExitPrice == input.AvgExitPrice ||
                    (AvgExitPrice != null &&
                    AvgExitPrice.Equals(input.AvgExitPrice))
                ) &&
                (
                    ClosedPnl == input.ClosedPnl ||
                    (ClosedPnl != null &&
                    ClosedPnl.Equals(input.ClosedPnl))
                ) &&
                (
                    FillCount == input.FillCount ||
                    (FillCount != null &&
                    FillCount.Equals(input.FillCount))
                ) &&
                (
                    Leverage == input.Leverage ||
                    (Leverage != null &&
                    Leverage.Equals(input.Leverage))
                ) &&
                (
                    CreatedAt == input.CreatedAt ||
                    (CreatedAt != null &&
                    CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }

                if (UserId != null)
                {
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                }

                if (Symbol != null)
                {
                    hashCode = hashCode * 59 + Symbol.GetHashCode();
                }

                if (OrderId != null)
                {
                    hashCode = hashCode * 59 + OrderId.GetHashCode();
                }

                if (Side != null)
                {
                    hashCode = hashCode * 59 + Side.GetHashCode();
                }

                if (Qty != null)
                {
                    hashCode = hashCode * 59 + Qty.GetHashCode();
                }

                if (OrderPrice != null)
                {
                    hashCode = hashCode * 59 + OrderPrice.GetHashCode();
                }

                if (OrderType != null)
                {
                    hashCode = hashCode * 59 + OrderType.GetHashCode();
                }

                if (ExecType != null)
                {
                    hashCode = hashCode * 59 + ExecType.GetHashCode();
                }

                if (ClosedSize != null)
                {
                    hashCode = hashCode * 59 + ClosedSize.GetHashCode();
                }

                if (CumEntryValue != null)
                {
                    hashCode = hashCode * 59 + CumEntryValue.GetHashCode();
                }

                if (AvgEntryPrice != null)
                {
                    hashCode = hashCode * 59 + AvgEntryPrice.GetHashCode();
                }

                if (CumExitValue != null)
                {
                    hashCode = hashCode * 59 + CumExitValue.GetHashCode();
                }

                if (AvgExitPrice != null)
                {
                    hashCode = hashCode * 59 + AvgExitPrice.GetHashCode();
                }

                if (ClosedPnl != null)
                {
                    hashCode = hashCode * 59 + ClosedPnl.GetHashCode();
                }

                if (FillCount != null)
                {
                    hashCode = hashCode * 59 + FillCount.GetHashCode();
                }

                if (Leverage != null)
                {
                    hashCode = hashCode * 59 + Leverage.GetHashCode();
                }

                if (CreatedAt != null)
                {
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
