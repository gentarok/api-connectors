/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// Get wallet balance response
    /// </summary>
    [DataContract]
    public partial class WalletBalance : IEquatable<WalletBalance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletBalance" /> class.
        /// </summary>
        /// <param name="equity">equity.</param>
        /// <param name="availableBalance">availableBalance.</param>
        /// <param name="usedMargin">usedMargin.</param>
        /// <param name="orderMargin">orderMargin.</param>
        /// <param name="positionMargin">positionMargin.</param>
        /// <param name="occClosingFee">occClosingFee.</param>
        /// <param name="occFundingFee">occFundingFee.</param>
        /// <param name="walletBalance">walletBalance.</param>
        /// <param name="realisedPnl">realisedPnl.</param>
        /// <param name="unrealisedPnl">unrealisedPnl.</param>
        /// <param name="cumRealisedPnl">cumRealisedPnl.</param>
        /// <param name="givenCash">givenCash.</param>
        /// <param name="serviceCash">serviceCash.</param>
        public WalletBalance(double? equity = default, double? availableBalance = default, double? usedMargin = default, double? orderMargin = default, double? positionMargin = default, double? occClosingFee = default, double? occFundingFee = default, double? walletBalance = default, double? realisedPnl = default, double? unrealisedPnl = default, double? cumRealisedPnl = default, double? givenCash = default, double? serviceCash = default)
        {
            Equity = equity;
            AvailableBalance = availableBalance;
            UsedMargin = usedMargin;
            OrderMargin = orderMargin;
            PositionMargin = positionMargin;
            OccClosingFee = occClosingFee;
            OccFundingFee = occFundingFee;
            _WalletBalance = walletBalance;
            RealisedPnl = realisedPnl;
            UnrealisedPnl = unrealisedPnl;
            CumRealisedPnl = cumRealisedPnl;
            GivenCash = givenCash;
            ServiceCash = serviceCash;
        }

        /// <summary>
        /// Gets or Sets Equity
        /// </summary>
        [DataMember(Name = "equity", EmitDefaultValue = false)]
        public double? Equity { get; set; }

        /// <summary>
        /// Gets or Sets AvailableBalance
        /// </summary>
        [DataMember(Name = "available_balance", EmitDefaultValue = false)]
        public double? AvailableBalance { get; set; }

        /// <summary>
        /// Gets or Sets UsedMargin
        /// </summary>
        [DataMember(Name = "used_margin", EmitDefaultValue = false)]
        public double? UsedMargin { get; set; }

        /// <summary>
        /// Gets or Sets OrderMargin
        /// </summary>
        [DataMember(Name = "order_margin", EmitDefaultValue = false)]
        public double? OrderMargin { get; set; }

        /// <summary>
        /// Gets or Sets PositionMargin
        /// </summary>
        [DataMember(Name = "position_margin", EmitDefaultValue = false)]
        public double? PositionMargin { get; set; }

        /// <summary>
        /// Gets or Sets OccClosingFee
        /// </summary>
        [DataMember(Name = "occ_closing_fee", EmitDefaultValue = false)]
        public double? OccClosingFee { get; set; }

        /// <summary>
        /// Gets or Sets OccFundingFee
        /// </summary>
        [DataMember(Name = "occ_funding_fee", EmitDefaultValue = false)]
        public double? OccFundingFee { get; set; }

        /// <summary>
        /// Gets or Sets _WalletBalance
        /// </summary>
        [DataMember(Name = "wallet_balance", EmitDefaultValue = false)]
        public double? _WalletBalance { get; set; }

        /// <summary>
        /// Gets or Sets RealisedPnl
        /// </summary>
        [DataMember(Name = "realised_pnl", EmitDefaultValue = false)]
        public double? RealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets UnrealisedPnl
        /// </summary>
        [DataMember(Name = "unrealised_pnl", EmitDefaultValue = false)]
        public double? UnrealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets CumRealisedPnl
        /// </summary>
        [DataMember(Name = "cum_realised_pnl", EmitDefaultValue = false)]
        public double? CumRealisedPnl { get; set; }

        /// <summary>
        /// Gets or Sets GivenCash
        /// </summary>
        [DataMember(Name = "given_cash", EmitDefaultValue = false)]
        public double? GivenCash { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCash
        /// </summary>
        [DataMember(Name = "service_cash", EmitDefaultValue = false)]
        public double? ServiceCash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WalletBalance {\n");
            sb.Append("  Equity: ").Append(Equity).Append("\n");
            sb.Append("  AvailableBalance: ").Append(AvailableBalance).Append("\n");
            sb.Append("  UsedMargin: ").Append(UsedMargin).Append("\n");
            sb.Append("  OrderMargin: ").Append(OrderMargin).Append("\n");
            sb.Append("  PositionMargin: ").Append(PositionMargin).Append("\n");
            sb.Append("  OccClosingFee: ").Append(OccClosingFee).Append("\n");
            sb.Append("  OccFundingFee: ").Append(OccFundingFee).Append("\n");
            sb.Append("  _WalletBalance: ").Append(_WalletBalance).Append("\n");
            sb.Append("  RealisedPnl: ").Append(RealisedPnl).Append("\n");
            sb.Append("  UnrealisedPnl: ").Append(UnrealisedPnl).Append("\n");
            sb.Append("  CumRealisedPnl: ").Append(CumRealisedPnl).Append("\n");
            sb.Append("  GivenCash: ").Append(GivenCash).Append("\n");
            sb.Append("  ServiceCash: ").Append(ServiceCash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as WalletBalance);
        }

        /// <summary>
        /// Returns true if WalletBalance instances are equal
        /// </summary>
        /// <param name="input">Instance of WalletBalance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletBalance input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Equity == input.Equity ||
                    (Equity != null &&
                    Equity.Equals(input.Equity))
                ) &&
                (
                    AvailableBalance == input.AvailableBalance ||
                    (AvailableBalance != null &&
                    AvailableBalance.Equals(input.AvailableBalance))
                ) &&
                (
                    UsedMargin == input.UsedMargin ||
                    (UsedMargin != null &&
                    UsedMargin.Equals(input.UsedMargin))
                ) &&
                (
                    OrderMargin == input.OrderMargin ||
                    (OrderMargin != null &&
                    OrderMargin.Equals(input.OrderMargin))
                ) &&
                (
                    PositionMargin == input.PositionMargin ||
                    (PositionMargin != null &&
                    PositionMargin.Equals(input.PositionMargin))
                ) &&
                (
                    OccClosingFee == input.OccClosingFee ||
                    (OccClosingFee != null &&
                    OccClosingFee.Equals(input.OccClosingFee))
                ) &&
                (
                    OccFundingFee == input.OccFundingFee ||
                    (OccFundingFee != null &&
                    OccFundingFee.Equals(input.OccFundingFee))
                ) &&
                (
                    _WalletBalance == input._WalletBalance ||
                    (_WalletBalance != null &&
                    _WalletBalance.Equals(input._WalletBalance))
                ) &&
                (
                    RealisedPnl == input.RealisedPnl ||
                    (RealisedPnl != null &&
                    RealisedPnl.Equals(input.RealisedPnl))
                ) &&
                (
                    UnrealisedPnl == input.UnrealisedPnl ||
                    (UnrealisedPnl != null &&
                    UnrealisedPnl.Equals(input.UnrealisedPnl))
                ) &&
                (
                    CumRealisedPnl == input.CumRealisedPnl ||
                    (CumRealisedPnl != null &&
                    CumRealisedPnl.Equals(input.CumRealisedPnl))
                ) &&
                (
                    GivenCash == input.GivenCash ||
                    (GivenCash != null &&
                    GivenCash.Equals(input.GivenCash))
                ) &&
                (
                    ServiceCash == input.ServiceCash ||
                    (ServiceCash != null &&
                    ServiceCash.Equals(input.ServiceCash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Equity != null)
                {
                    hashCode = hashCode * 59 + Equity.GetHashCode();
                }

                if (AvailableBalance != null)
                {
                    hashCode = hashCode * 59 + AvailableBalance.GetHashCode();
                }

                if (UsedMargin != null)
                {
                    hashCode = hashCode * 59 + UsedMargin.GetHashCode();
                }

                if (OrderMargin != null)
                {
                    hashCode = hashCode * 59 + OrderMargin.GetHashCode();
                }

                if (PositionMargin != null)
                {
                    hashCode = hashCode * 59 + PositionMargin.GetHashCode();
                }

                if (OccClosingFee != null)
                {
                    hashCode = hashCode * 59 + OccClosingFee.GetHashCode();
                }

                if (OccFundingFee != null)
                {
                    hashCode = hashCode * 59 + OccFundingFee.GetHashCode();
                }

                if (_WalletBalance != null)
                {
                    hashCode = hashCode * 59 + _WalletBalance.GetHashCode();
                }

                if (RealisedPnl != null)
                {
                    hashCode = hashCode * 59 + RealisedPnl.GetHashCode();
                }

                if (UnrealisedPnl != null)
                {
                    hashCode = hashCode * 59 + UnrealisedPnl.GetHashCode();
                }

                if (CumRealisedPnl != null)
                {
                    hashCode = hashCode * 59 + CumRealisedPnl.GetHashCode();
                }

                if (GivenCash != null)
                {
                    hashCode = hashCode * 59 + GivenCash.GetHashCode();
                }

                if (ServiceCash != null)
                {
                    hashCode = hashCode * 59 + ServiceCash.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}