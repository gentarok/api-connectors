/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// LinearKlineResp
    /// </summary>
    [DataContract]
    public partial class LinearKlineResp : IEquatable<LinearKlineResp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LinearKlineResp" /> class.
        /// </summary>
        /// <param name="close">close.</param>
        /// <param name="high">high.</param>
        /// <param name="id">id.</param>
        /// <param name="interval">interval.</param>
        /// <param name="low">low.</param>
        /// <param name="open">open.</param>
        /// <param name="openTime">openTime.</param>
        /// <param name="period">period.</param>
        /// <param name="startAt">startAt.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="turnover">turnover.</param>
        /// <param name="volume">volume.</param>
        public LinearKlineResp(double? close = default, double? high = default, int? id = default, string interval = default, double? low = default, double? open = default, long? openTime = default, string period = default, long? startAt = default, string symbol = default, double? turnover = default, double? volume = default)
        {
            Close = close;
            High = high;
            Id = id;
            Interval = interval;
            Low = low;
            Open = open;
            OpenTime = openTime;
            Period = period;
            StartAt = startAt;
            Symbol = symbol;
            Turnover = turnover;
            Volume = volume;
        }

        /// <summary>
        /// Gets or Sets Close
        /// </summary>
        [DataMember(Name = "close", EmitDefaultValue = false)]
        public double? Close { get; set; }

        /// <summary>
        /// Gets or Sets High
        /// </summary>
        [DataMember(Name = "high", EmitDefaultValue = false)]
        public double? High { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Interval
        /// </summary>
        [DataMember(Name = "interval", EmitDefaultValue = false)]
        public string Interval { get; set; }

        /// <summary>
        /// Gets or Sets Low
        /// </summary>
        [DataMember(Name = "low", EmitDefaultValue = false)]
        public double? Low { get; set; }

        /// <summary>
        /// Gets or Sets Open
        /// </summary>
        [DataMember(Name = "open", EmitDefaultValue = false)]
        public double? Open { get; set; }

        /// <summary>
        /// Gets or Sets OpenTime
        /// </summary>
        [DataMember(Name = "open_time", EmitDefaultValue = false)]
        public long? OpenTime { get; set; }

        /// <summary>
        /// Gets or Sets Period
        /// </summary>
        [DataMember(Name = "period", EmitDefaultValue = false)]
        public string Period { get; set; }

        /// <summary>
        /// Gets or Sets StartAt
        /// </summary>
        [DataMember(Name = "start_at", EmitDefaultValue = false)]
        public long? StartAt { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Turnover
        /// </summary>
        [DataMember(Name = "turnover", EmitDefaultValue = false)]
        public double? Turnover { get; set; }

        /// <summary>
        /// Gets or Sets Volume
        /// </summary>
        [DataMember(Name = "volume", EmitDefaultValue = false)]
        public double? Volume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LinearKlineResp {\n");
            sb.Append("  Close: ").Append(Close).Append("\n");
            sb.Append("  High: ").Append(High).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  Low: ").Append(Low).Append("\n");
            sb.Append("  Open: ").Append(Open).Append("\n");
            sb.Append("  OpenTime: ").Append(OpenTime).Append("\n");
            sb.Append("  Period: ").Append(Period).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Turnover: ").Append(Turnover).Append("\n");
            sb.Append("  Volume: ").Append(Volume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as LinearKlineResp);
        }

        /// <summary>
        /// Returns true if LinearKlineResp instances are equal
        /// </summary>
        /// <param name="input">Instance of LinearKlineResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinearKlineResp input)
        {
            if (input is null)
            {
                return false;
            }

            return
                (
                    Close == input.Close ||
                    (Close is not null &&
                    Close.Equals(input.Close))
                ) &&
                (
                    High == input.High ||
                    (High is not null &&
                    High.Equals(input.High))
                ) &&
                (
                    Id == input.Id ||
                    (Id is not null &&
                    Id.Equals(input.Id))
                ) &&
                (
                    Interval == input.Interval ||
                    (Interval is not null &&
                    Interval.Equals(input.Interval))
                ) &&
                (
                    Low == input.Low ||
                    (Low is not null &&
                    Low.Equals(input.Low))
                ) &&
                (
                    Open == input.Open ||
                    (Open is not null &&
                    Open.Equals(input.Open))
                ) &&
                (
                    OpenTime == input.OpenTime ||
                    (OpenTime is not null &&
                    OpenTime.Equals(input.OpenTime))
                ) &&
                (
                    Period == input.Period ||
                    (Period is not null &&
                    Period.Equals(input.Period))
                ) &&
                (
                    StartAt == input.StartAt ||
                    (StartAt is not null &&
                    StartAt.Equals(input.StartAt))
                ) &&
                (
                    Symbol == input.Symbol ||
                    (Symbol is not null &&
                    Symbol.Equals(input.Symbol))
                ) &&
                (
                    Turnover == input.Turnover ||
                    (Turnover is not null &&
                    Turnover.Equals(input.Turnover))
                ) &&
                (
                    Volume == input.Volume ||
                    (Volume is not null &&
                    Volume.Equals(input.Volume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Close is not null)
                {
                    hashCode = hashCode * 59 + Close.GetHashCode();
                }

                if (High is not null)
                {
                    hashCode = hashCode * 59 + High.GetHashCode();
                }

                if (Id is not null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }

                if (Interval is not null)
                {
                    hashCode = hashCode * 59 + Interval.GetHashCode();
                }

                if (Low is not null)
                {
                    hashCode = hashCode * 59 + Low.GetHashCode();
                }

                if (Open is not null)
                {
                    hashCode = hashCode * 59 + Open.GetHashCode();
                }

                if (OpenTime is not null)
                {
                    hashCode = hashCode * 59 + OpenTime.GetHashCode();
                }

                if (Period is not null)
                {
                    hashCode = hashCode * 59 + Period.GetHashCode();
                }

                if (StartAt is not null)
                {
                    hashCode = hashCode * 59 + StartAt.GetHashCode();
                }

                if (Symbol is not null)
                {
                    hashCode = hashCode * 59 + Symbol.GetHashCode();
                }

                if (Turnover is not null)
                {
                    hashCode = hashCode * 59 + Turnover.GetHashCode();
                }

                if (Volume is not null)
                {
                    hashCode = hashCode * 59 + Volume.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}