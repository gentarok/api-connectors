/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace BybitAPI.Model
{
    /// <summary>
    /// Get funding record response
    /// </summary>
    [DataContract]
    public partial class FundingRecords : IEquatable<FundingRecords>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundingRecords" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="userId">userId.</param>
        /// <param name="coin">coin.</param>
        /// <param name="walletId">walletId.</param>
        /// <param name="type">type.</param>
        /// <param name="amount">amount.</param>
        /// <param name="txId">txId.</param>
        /// <param name="address">address.</param>
        /// <param name="walletBalance">walletBalance.</param>
        /// <param name="execTime">execTime.</param>
        /// <param name="crossSeq">crossSeq.</param>
        public FundingRecords(decimal? id = default, decimal? userId = default, string coin = default, decimal? walletId = default, string type = default, string amount = default, string txId = default, string address = default, string walletBalance = default, string execTime = default, decimal? crossSeq = default)
        {
            Id = id;
            UserId = userId;
            Coin = coin;
            WalletId = walletId;
            Type = type;
            Amount = amount;
            TxId = txId;
            Address = address;
            WalletBalance = walletBalance;
            ExecTime = execTime;
            CrossSeq = crossSeq;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public decimal? Id { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public decimal? UserId { get; set; }

        /// <summary>
        /// Gets or Sets Coin
        /// </summary>
        [DataMember(Name = "coin", EmitDefaultValue = false)]
        public string Coin { get; set; }

        /// <summary>
        /// Gets or Sets WalletId
        /// </summary>
        [DataMember(Name = "wallet_id", EmitDefaultValue = false)]
        public decimal? WalletId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name = "amount", EmitDefaultValue = false)]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets TxId
        /// </summary>
        [DataMember(Name = "tx_id", EmitDefaultValue = false)]
        public string TxId { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets WalletBalance
        /// </summary>
        [DataMember(Name = "wallet_balance", EmitDefaultValue = false)]
        public string WalletBalance { get; set; }

        /// <summary>
        /// Gets or Sets ExecTime
        /// </summary>
        [DataMember(Name = "exec_time", EmitDefaultValue = false)]
        public string ExecTime { get; set; }

        /// <summary>
        /// Gets or Sets CrossSeq
        /// </summary>
        [DataMember(Name = "cross_seq", EmitDefaultValue = false)]
        public decimal? CrossSeq { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FundingRecords {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Coin: ").Append(Coin).Append("\n");
            sb.Append("  WalletId: ").Append(WalletId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  TxId: ").Append(TxId).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  WalletBalance: ").Append(WalletBalance).Append("\n");
            sb.Append("  ExecTime: ").Append(ExecTime).Append("\n");
            sb.Append("  CrossSeq: ").Append(CrossSeq).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as FundingRecords);
        }

        /// <summary>
        /// Returns true if FundingRecords instances are equal
        /// </summary>
        /// <param name="input">Instance of FundingRecords to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundingRecords input)
        {
            if (input == null)
            {
                return false;
            }

            return
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) &&
                (
                    UserId == input.UserId ||
                    (UserId != null &&
                    UserId.Equals(input.UserId))
                ) &&
                (
                    Coin == input.Coin ||
                    (Coin != null &&
                    Coin.Equals(input.Coin))
                ) &&
                (
                    WalletId == input.WalletId ||
                    (WalletId != null &&
                    WalletId.Equals(input.WalletId))
                ) &&
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) &&
                (
                    Amount == input.Amount ||
                    (Amount != null &&
                    Amount.Equals(input.Amount))
                ) &&
                (
                    TxId == input.TxId ||
                    (TxId != null &&
                    TxId.Equals(input.TxId))
                ) &&
                (
                    Address == input.Address ||
                    (Address != null &&
                    Address.Equals(input.Address))
                ) &&
                (
                    WalletBalance == input.WalletBalance ||
                    (WalletBalance != null &&
                    WalletBalance.Equals(input.WalletBalance))
                ) &&
                (
                    ExecTime == input.ExecTime ||
                    (ExecTime != null &&
                    ExecTime.Equals(input.ExecTime))
                ) &&
                (
                    CrossSeq == input.CrossSeq ||
                    (CrossSeq != null &&
                    CrossSeq.Equals(input.CrossSeq))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                if (Id != null)
                {
                    hashCode = hashCode * 59 + Id.GetHashCode();
                }

                if (UserId != null)
                {
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                }

                if (Coin != null)
                {
                    hashCode = hashCode * 59 + Coin.GetHashCode();
                }

                if (WalletId != null)
                {
                    hashCode = hashCode * 59 + WalletId.GetHashCode();
                }

                if (Type != null)
                {
                    hashCode = hashCode * 59 + Type.GetHashCode();
                }

                if (Amount != null)
                {
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                }

                if (TxId != null)
                {
                    hashCode = hashCode * 59 + TxId.GetHashCode();
                }

                if (Address != null)
                {
                    hashCode = hashCode * 59 + Address.GetHashCode();
                }

                if (WalletBalance != null)
                {
                    hashCode = hashCode * 59 + WalletBalance.GetHashCode();
                }

                if (ExecTime != null)
                {
                    hashCode = hashCode * 59 + ExecTime.GetHashCode();
                }

                if (CrossSeq != null)
                {
                    hashCode = hashCode * 59 + CrossSeq.GetHashCode();
                }

                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
