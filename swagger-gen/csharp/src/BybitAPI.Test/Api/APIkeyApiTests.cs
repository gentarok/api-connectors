/*
 * Bybit API
 *
 * ## REST API for the Bybit Exchange. Base URI: [https://api.bybit.com]
 *
 * OpenAPI spec version: 0.2.10
 * Contact: support@bybit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using BybitAPI.Client;
using BybitAPI.Model;
using Moq;
using NUnit.Framework;
using RestSharp;
using System;
using System.Net;
using System.Threading.Tasks;

namespace BybitAPI.Api.Test
{
    /// <summary>
    ///  Class for testing APIkeyApi
    /// </summary>
    [TestFixture]
    public class APIkeyApiTests
    {
        private APIkeyApi instance;

        public static IRestClient MockRestClient(HttpStatusCode httpStatusCode, string json)
        {
            var response = new Mock<IRestResponse>();
            response.Setup(_ => _.StatusCode).Returns(httpStatusCode);
            response.Setup(_ => _.Headers).Returns(Array.Empty<Parameter>());
            response.Setup(_ => _.Content).Returns(json);

            var mockIRestClient = new Mock<IRestClient>();
            mockIRestClient
                .Setup(x => x.Execute(It.IsAny<IRestRequest>()))
                .Returns(response.Object);
            mockIRestClient
                .Setup(x => x.ExecuteAsync(It.IsAny<IRestRequest>(), System.Threading.CancellationToken.None))
                .ReturnsAsync(response.Object);

            return mockIRestClient.Object;
        }

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new APIkeyApi();
            var client = MockRestClient(HttpStatusCode.OK, json);
            instance.Configuration.ApiClient.RestClient = client;
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        /// <summary>
        /// Test an instance of APIkeyApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<APIkeyApi>(instance, "instance is a APIkeyApi");
        }

        private readonly string json = @"{
    ""ret_code"": 0,
    ""ret_msg"": ""ok"",
    ""ext_code"": """",
    ""result"": [
        {
            ""api_key"": ""7GkMBBLTbGRfa0Nuh1"",
            ""type"": ""personal"",
            ""user_id"": 1,
            ""inviter_id"": 3,
            ""ips"": [
                ""*""
            ],
            ""note"": ""scalping_bot"",
            ""permissions"": [
                ""Order"",
                ""Position""
            ],
            ""created_at"": ""2019-10-28T13:22:39.000Z"",
            ""expired_at"": ""2020-01-28T13:22:39.000Z"",
            ""read_only"": false
        }
    ],
    ""ext_info"": null,
    ""time_now"": ""1577445138.790150"",
    ""rate_limit_status"": 99,
    ""rate_limit_reset_ms"": 1577445138812,
    ""rate_limit"": 100
}";

        /// <summary>
        /// Test APIkeyInfo
        /// </summary>
        [Test]
        public void APIkeyInfoTest()
        {
            var response = instance.APIkeyInfo();
            Assert.IsInstanceOf<APIKeyBase>(response, "response is APIKeyBase");
            Assert.AreEqual(0, response.RetCode);
            Assert.AreEqual("ok", response.RetMsg);
            Assert.AreEqual("", response.ExtCode);
            Assert.IsNull(response.ExtInfo);
            Assert.AreEqual("1577445138.790150", response.TimeNow);
            Assert.AreEqual(1, response.Result.Count);
            Assert.AreEqual("7GkMBBLTbGRfa0Nuh1", response.Result[0].ApiKey);
            // TODO: and more...
        }

        [Test]
        public void APIkeyInfoWithHttpInfoTest()
        {
            var response = instance.APIkeyInfoWithHttpInfo();
            Assert.IsInstanceOf<ApiResponse<APIKeyBase>>(response, "response is ApiResponse<APIKeyBase>");
        }

        [Test()]
        public async Task APIkeyInfoAsyncTest()
        {
            var response = await instance.APIkeyInfoAsync();
            Assert.IsInstanceOf<APIKeyBase>(response, "response is APIKeyBase");
        }

        [Test()]
        public async Task APIkeyInfoAsyncWithHttpInfoTest()
        {
            var response = await instance.APIkeyInfoAsyncWithHttpInfo();
            Assert.IsInstanceOf<ApiResponse<APIKeyBase>>(response, "response is ApiResponse<APIKeyBase>");
        }
    }
}